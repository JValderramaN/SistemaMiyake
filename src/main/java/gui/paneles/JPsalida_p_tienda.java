package gui.paneles;

import com.healthmarketscience.jackcess.ColumnBuilder;
import com.healthmarketscience.jackcess.Database;
import com.healthmarketscience.jackcess.DatabaseBuilder;
import com.healthmarketscience.jackcess.Table;
import com.healthmarketscience.jackcess.TableBuilder;
import hibernate.DAO.DaoQuery;
import util.JavaUtil;
import static util.JavaUtil.setTableCellAlignment;
import modelos.tablas.TableModelReport;
import hibernate.DAO.ObjectModelDAO;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import modelos.mapeos.SalidaParaTienda;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.sql.SQLException;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javafx.scene.control.TitledPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import modelos.mapeos.Almacen;
import modelos.mapeos.InventarioTienda;
import modelos.mapeos.InventarioTiendaPK;
import modelos.mapeos.Producto;
import modelos.mapeos.SalidaParaTiendaDetalle;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.Query;

public class JPsalida_p_tienda extends javax.swing.JPanel {

    private List resultListProductoSalida;//detalle
    private List resultListPrecios;
    private boolean revisado = false;
    private int pos;
    private SalidaParaTienda cabecera = null;
    DefaultTableModel tableModel;
    private List resultListAlmacen;

    public final InputStream rutaJasper = this.getClass().getResourceAsStream("/reportes/ReporteMercanciaAsignada.jasper");
    public final InputStream rutaJrxml = this.getClass().getResourceAsStream("/reportes/ReporteMercanciaAsignada.jrxml");

    public JPsalida_p_tienda() {
        initComponents();

        setTableCellAlignment(JLabel.CENTER, listadoMercancia);

        //checkboxRevisado.setSelected(false);
       // setCB(buttonGrouptipo.isSelected(null));
        setCB_Tienda();

        listadoMercancia.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGrouptipo = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        panelCabezera = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cb_Salidas = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        fieldfecha = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fieldTienda = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fieldPersonalDep = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        fieldAyudante = new javax.swing.JTextField();
        cb_tienda = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cb_salidasregistradas = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        checkboxRevisado = new javax.swing.JCheckBox();
        jRadioButtonPendiente = new javax.swing.JRadioButton();
        jRadioButtonRevisado = new javax.swing.JRadioButton();
        panelFinal = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        fieldTotal = new javax.swing.JTextField();
        bGenerarReporte = new javax.swing.JButton();
        bImprimirEtiquetas = new javax.swing.JButton();
        panelTabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listadoMercancia = new org.jdesktop.swingx.JXTable();

        setToolTipText("");
        setMinimumSize(new java.awt.Dimension(5, 5));
        setPreferredSize(new java.awt.Dimension(5, 5));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));

        jPanel3.setLayout(new java.awt.BorderLayout());

        panelCabezera.setLayout(new javax.swing.BoxLayout(panelCabezera, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setText("Salida:");

        cb_Salidas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_SalidasItemStateChanged(evt);
            }
        });
        cb_Salidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_SalidasActionPerformed(evt);
            }
        });

        jLabel2.setText("Fecha:");

        fieldfecha.setEditable(false);

        jLabel3.setText("Tienda:");
        jLabel3.setMinimumSize(new java.awt.Dimension(10, 14));
        jLabel3.setPreferredSize(new java.awt.Dimension(10, 14));

        fieldTienda.setEditable(false);

        jLabel4.setText("Facturadora:");

        fieldPersonalDep.setEditable(false);

        jLabel6.setText("Ayudante:");

        fieldAyudante.setEditable(false);

        cb_tienda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_tiendaActionPerformed(evt);
            }
        });

        jLabel5.setText("Tienda:");

        jLabel7.setText("Salidas Registradas:");

        cb_salidasregistradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_salidasregistradasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(7, 7, 7)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldPersonalDep)
                            .addComponent(fieldAyudante)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldTienda)
                            .addComponent(fieldfecha)
                            .addComponent(cb_Salidas, 0, 421, Short.MAX_VALUE)
                            .addComponent(cb_tienda, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cb_salidasregistradas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_Salidas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_tienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cb_salidasregistradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldfecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldTienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldPersonalDep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldAyudante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        panelCabezera.add(jPanel2);

        checkboxRevisado.setText("Revisado");
        checkboxRevisado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxRevisadoActionPerformed(evt);
            }
        });

        buttonGrouptipo.add(jRadioButtonPendiente);
        jRadioButtonPendiente.setSelected(true);
        jRadioButtonPendiente.setText("Pendiente");
        jRadioButtonPendiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonPendienteActionPerformed(evt);
            }
        });

        buttonGrouptipo.add(jRadioButtonRevisado);
        jRadioButtonRevisado.setText("Revisado");
        jRadioButtonRevisado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonRevisadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkboxRevisado)
                    .addComponent(jRadioButtonRevisado)
                    .addComponent(jRadioButtonPendiente))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jRadioButtonPendiente)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonRevisado)
                .addGap(35, 35, 35)
                .addComponent(checkboxRevisado)
                .addContainerGap(103, Short.MAX_VALUE))
        );

        panelCabezera.add(jPanel1);

        jPanel3.add(panelCabezera, java.awt.BorderLayout.NORTH);

        jLabel10.setText("Total:");

        fieldTotal.setEditable(false);

        bGenerarReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/1415416322_list-accept.png"))); // NOI18N
        bGenerarReporte.setText("Generar Reporte");
        bGenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGenerarReporteActionPerformed(evt);
            }
        });

        bImprimirEtiquetas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/1415666849_Print.png"))); // NOI18N
        bImprimirEtiquetas.setText("Imprimir Etiquetas");
        bImprimirEtiquetas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bImprimirEtiquetasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFinalLayout = new javax.swing.GroupLayout(panelFinal);
        panelFinal.setLayout(panelFinalLayout);
        panelFinalLayout.setHorizontalGroup(
            panelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFinalLayout.createSequentialGroup()
                .addContainerGap(381, Short.MAX_VALUE)
                .addGroup(panelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFinalLayout.createSequentialGroup()
                        .addComponent(bImprimirEtiquetas)
                        .addGap(18, 18, 18)
                        .addComponent(bGenerarReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFinalLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fieldTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
        );
        panelFinalLayout.setVerticalGroup(
            panelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFinalLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(panelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(panelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bGenerarReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bImprimirEtiquetas, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.add(panelFinal, java.awt.BorderLayout.SOUTH);

        listadoMercancia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "N°", "Codigo", "Referencia", "Descripción", "Cantidad", "Precio", "Descuento", "Bulto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listadoMercancia.setShowGrid(true);
        listadoMercancia.setSortable(false);
        jScrollPane1.setViewportView(listadoMercancia);

        javax.swing.GroupLayout panelTablaLayout = new javax.swing.GroupLayout(panelTabla);
        panelTabla.setLayout(panelTablaLayout);
        panelTablaLayout.setHorizontalGroup(
            panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)
        );
        panelTablaLayout.setVerticalGroup(
            panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTablaLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jPanel3.add(panelTabla, java.awt.BorderLayout.CENTER);

        jScrollPane2.setViewportView(jPanel3);

        add(jScrollPane2);
    }// </editor-fold>//GEN-END:initComponents

    private void createMDB() throws IOException, SQLException {
        File archivo = new File("Etiquetas.mdb");
        archivo.createNewFile();
        Database db = DatabaseBuilder.create(Database.FileFormat.V2000, archivo);
        Table newTable = new TableBuilder("Tbl_Etiquetas")
                .addColumn(new ColumnBuilder("CodigoProducto")
                        .setSQLType(Types.NUMERIC))
                .addColumn(new ColumnBuilder("Referencia")
                        .setSQLType(Types.VARCHAR))
                .addColumn(new ColumnBuilder("DescripcionProducto")
                        .setSQLType(Types.VARCHAR))
                .addColumn(new ColumnBuilder("PrecioVenta")
                        .setSQLType(Types.FLOAT))
                .addColumn(new ColumnBuilder("CostoDolar")//siempre 0
                        .setSQLType(Types.NUMERIC))
                .addColumn(new ColumnBuilder("CodigoProveedor")
                        .setSQLType(Types.VARCHAR))
                .addColumn(new ColumnBuilder("Mes")
                        .setSQLType(Types.VARCHAR))
                .addColumn(new ColumnBuilder("Anno")
                        .setSQLType(Types.VARCHAR))
                .addColumn(new ColumnBuilder("TextoZona")//siempre vacio
                        .setSQLType(Types.VARCHAR))
                .addColumn(new ColumnBuilder("Cantidad")//siempre 1
                        .setSQLType(Types.NUMERIC))
                .addColumn(new ColumnBuilder("Adicional")//siempre vacio
                        .setSQLType(Types.VARCHAR))
                .addColumn(new ColumnBuilder("Marca")
                        .setSQLType(Types.VARCHAR))
                .addColumn(new ColumnBuilder("PrecioVentasi")
                        .setSQLType(Types.FLOAT))
                .toTable(db);

        Calendar now = Calendar.getInstance();

        for (Object rslDetalle : resultListProductoSalida) {
            SalidaParaTiendaDetalle detalle = (SalidaParaTiendaDetalle) rslDetalle;
            String hql = "";

            hql = "FROM InventarioTienda ivt WHERE ivt.producto.idProducto = " + detalle.getProducto().getIdProducto()
                    + "AND ivt.almacen.idAlmacen=" + detalle.getSalidaParaTienda().getIdAlmacenHasta().getIdAlmacen();

//            hql = "FROM InventarioTiendaPK ivt WHERE ivt.idProducto.idProducto = " + detalle.getProducto().getIdProducto()
//                    + " AND ppt.idAlmacen.idAlmacen= " + detalle.getSalidaParaTienda().getIdAlmacenHasta().getIdAlmacen();
            List listadoProductosConPrecio = ObjectModelDAO.getResultQuery(hql);

            if (listadoProductosConPrecio.size() > 1) {
                JOptionPane.showMessageDialog(null, "Exiten dos precios distintos de un mismo producto en la tienda, \n No se cargará");
            } else {
                if (listadoProductosConPrecio.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "No existe producto en esta tienda, No se cargará");

                } else {
                    InventarioTienda ivt = (InventarioTienda) listadoProductosConPrecio.get(0);
                    Producto produc = ivt.getProducto();
                    Integer id = produc.getIdProducto();
                    String referencia = produc.getReferenciaProducto();
                    String descripcion = produc.getDescripcion();
                    Double precioCI = (ivt.getPrecioConDescuento() + (ivt.getPrecioConDescuento() * JavaUtil.iva));
                    Integer idproveedor = produc.getIdProveedor() == null ? null : produc.getIdProveedor().getIdProveedor();
                    String marca = produc.getIdMarca() == null ? "" : produc.getIdMarca().getNombre();
                    Float precioSI = ivt.getPrecioConDescuento();
                    for (int i = 0; i < detalle.getCantidadProducto(); i++) {

                        newTable.addRow(
                                id,
                                referencia,
                                descripcion,
                                precioCI,
                                0,
                                idproveedor + "",
                                now.get(Calendar.MONTH) + 1,
                                now.get(Calendar.YEAR),
                                "",
                                1,
                                "",
                                marca,
                                precioSI
                        );
                    }
                }
            }
        }
    }

    private void setCB(boolean tipo) {
        String hql = "FROM SalidaParaTienda s WHERE s.revisado = :revisado order by s.idSalida asc";
        DaoQuery q = ObjectModelDAO.createQueryDAO(hql);
        q.getQuery().setParameter("revisado", tipo);
        List resultList_sw = ObjectModelDAO.getResultQuery(q);

        cb_Salidas.removeAllItems();
        cb_Salidas.addItem("Todas");
        for (Object object : resultList_sw) {
            SalidaParaTienda c = (SalidaParaTienda) object;
            cb_Salidas.addItem(c.getIdSalida());
        }
    }

    private void setCB_Tienda() {
        resultListAlmacen = ObjectModelDAO.getResultQuery("FROM Almacen a order by a.idAlmacen asc");
        cb_tienda.removeAllItems();
        cb_tienda.addItem("Todas las Tiendas");
        for (Object object : resultListAlmacen) {
            Almacen a = (Almacen) object;
            cb_tienda.addItem(a.getIdAlmacen());
        }
    }

    private void setCB_Salidas(boolean tipo) {
        if (cb_tienda.getSelectedItem().equals("Todas las Tiendas")) {
            return;
        }
      Almacen  almc= (Almacen) resultListAlmacen.get(cb_tienda.getSelectedIndex()-1);
        
        String hql = "FROM SalidaParaTienda s WHERE s.idAlmacenDesde = " + almc.getIdAlmacen()
                + " AND s.revisado = :revisado order by s.idSalida asc";
        DaoQuery q = ObjectModelDAO.createQueryDAO(hql);
        q.getQuery().setParameter("revisado", tipo);
        List resultList_sw = ObjectModelDAO.getResultQuery(q);

        cb_salidasregistradas.removeAllItems();
       // cb_salidasregistradas.addItem("Todas");
        for (Object object : resultList_sw) {
            SalidaParaTienda c = (SalidaParaTienda) object;
            cb_salidasregistradas.addItem(c.getIdSalida());
        }
    }

    private void cb_SalidasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_SalidasItemStateChanged

//        if (evt.getStateChange() == ItemEvent.SELECTED) {
//
//            String sql = "";
//
//            cabecera = ObjectModelDAO.getObject((Integer) cb_Salidas.getSelectedItem(), SalidaParaTienda.class);
//            sql = "FROM SalidaParaTiendaDetalle s WHERE s.salidaParaTiendaDetallePK.idSalida = " 
//                    + cb_Salidas.getSelectedItem();
//            resultListProductoSalida = ObjectModelDAO.getResultQuery(sql);
//
//            if (resultListProductoSalida.isEmpty()) {
//                return;
//            }
//
//            if (cabecera.getIdSalida() != null) {
//                fieldnumFact.setText(cabecera.getIdSalida().toString());
//            } else {
//                fieldnumFact.setText("");
//            }
//            if (cabecera.getIdAlmacenHasta() != null) {
//                fieldTienda.setText(cabecera.getIdAlmacenHasta().getDescripcion());
//            } else {
//                fieldTienda.setText("");
//            }
//            if (cabecera.getIdUsuario1() != null) {
//                fieldPersonalDep.setText(cabecera.getIdUsuario1().getNombre());
//            } else {
//                fieldPersonalDep.setText("");
//            }
//            if (cabecera.getIdUsuario2() != null) {
//                fieldAyudante.setText(cabecera.getIdUsuario2().getNombre());
//            } else {
//                fieldAyudante.setText("");
//            }
//            if (cabecera.getTotal() != null) {
//                fieldTotal.setText(cabecera.getTotal() + "");
//            } else {
//                fieldTotal.setText("");
//            }
//
//            JavaUtil.displayResult(resultListProductoSalida, listadoMercancia);
//            listadoMercancia.setEditable(false);
//            checkboxRevisado.setSelected(false);
//            pos = cb_Salidas.getSelectedIndex();
//        }
    }//GEN-LAST:event_cb_SalidasItemStateChanged

    //Para probar el reporte con multiples datos y de bastante longitud
    private void TableModelData() {
        Vector<String> columnNames = new Vector<>();
        columnNames.add("Codigo");
        columnNames.add("Referencia");
        columnNames.add("Descripcion");
        columnNames.add("Cantidad");
        columnNames.add("Precio");
        columnNames.add("Bulto");

        Vector<Object> data = new Vector<>();
        for (int i = 0; i < 100; i++) {
            Vector<Object> subdata = new Vector<>();
            for (int j = 0; j < 500; j++) {
                if (j == 2) {
                    subdata.add("fgdretttttetrrrrrrrrrrrrrrrrrrerererererererererererererertygfhfd");
                } else {
                    if (j == 4) {
                        subdata.add((float) i * 400);
                    } else {
                        subdata.add(i * 850);
                    }
                }

            }
            data.add(subdata);
        }

        tableModel = new DefaultTableModel(data, columnNames);
    }

    private void generarReporte() {
        try {
            JasperPrint jasperPrint = null;
            JasperPrint jasperPrint2 = null;
            TableModelData();
            Map<String, Object> parametro = new HashMap<>();
            String s = "";

            for (int i = 0; i < tableModel.getColumnCount(); i++) {
                s += tableModel.getColumnName(i) + "\t" + Integer.valueOf(i) + "\n";
            }
            TableModelReport dataSourse = new TableModelReport(listadoMercancia.getModel());

            parametro.put("Fecha", fieldfecha.getText());
            parametro.put("Tienda", fieldTienda.getText());
            parametro.put("Facturadora", fieldPersonalDep.getText());
            parametro.put("Ayudante", fieldAyudante.getText());
            parametro.put("Salida", cb_Salidas.getSelectedItem().toString());
            parametro.put("REPORT_DATA_SOURSE", dataSourse);
            JasperCompileManager.compileReport(rutaJrxml);
            jasperPrint = JasperFillManager.fillReport(rutaJasper, parametro, dataSourse);
            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);
            jasperViewer.setTitle("Reporte de Salida de Mercancía");
            jasperViewer.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "error" + e);
        }
    }

    private void cb_SalidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_SalidasActionPerformed

        if (cb_Salidas.getSelectedIndex() != -1) {
            listadoMercancia.setModel(new DefaultTableModel());
            return;
        }

        String sql = "";

        String HQL = "SELECT s,ivt.precioConDescuento,ivt.descuento"
                + " FROM SalidaParaTiendaDetalle s,InventarioTienda ivt "
                + " INNER JOIN s.salidaParaTienda spt WHERE spt.idSalida= " + cb_salidasregistradas.getSelectedItem()
                + " AND ivt.producto=s.producto AND ivt.almacen=spt.idAlmacenHasta"
                // + " AND spt.revisado = " + tipo
                + " ORDER BY s.nroRenglon ASC";
//                "SELECT s,ppt.precio,ppt.descuento"
//                + " FROM SalidaParaTiendaDetalle s,PrecioProductoTienda ppt INNER JOIN  s.salidaParaTienda spt"
//                + " WHERE spt.idSalida =" + cb_Salidas.getSelectedItem()
//                + " AND ppt.idProducto=s.producto AND ppt.idAlmacen=spt.idAlmacenHasta";

//        cabecera = ObjectModelDAO.getObject((Integer) cb_Salidas.getSelectedItem(), SalidaParaTienda.class);
//        sql = "FROM SalidaParaTiendaDetalle s WHERE s.salidaParaTiendaDetallePK.idSalida ="
//                + cb_Salidas.getSelectedItem();
//        System.out.println(sql);
        resultListProductoSalida = ObjectModelDAO.getResultQuery(HQL);

        if (resultListProductoSalida.isEmpty()) {
            return;
        }

        cabecera = ((SalidaParaTiendaDetalle) ((Object[]) resultListProductoSalida.get(0))[0]).getSalidaParaTienda();

        //SalidaParaTienda cabecera = ((SalidaParaTiendaDetalle) resultListProductoSalida.get(0)).getSalidaParaTienda();
        if (cabecera.getFechaAsignacion() != null) {
            SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd-MM-yyyy");
            fieldfecha.setText(DATE_FORMAT.format(cabecera.getFechaAsignacion()));
        } else {
            fieldfecha.setText("");
        }
        if (cabecera.getIdAlmacenHasta() != null) {
            fieldTienda.setText(cabecera.getIdAlmacenHasta().getNombre());
        } else {
            fieldTienda.setText("");
        }
        if (cabecera.getIdUsuario1() != null) {
            fieldPersonalDep.setText(cabecera.getIdUsuario1().getNombre());
        } else {
            fieldPersonalDep.setText("");
        }
        if (cabecera.getIdUsuario2() != null) {
            fieldAyudante.setText(cabecera.getIdUsuario2().getNombre());
        } else {
            fieldAyudante.setText("");
        }
        if (cabecera.getTotal() != null) {
            fieldTotal.setText(cabecera.getTotal() + "");
        } else {
            fieldTotal.setText("");
        }

        JavaUtil.displayResult(resultListProductoSalida, listadoMercancia);
        listadoMercancia.setEditable(false);
        pos = cb_Salidas.getSelectedIndex();


    }//GEN-LAST:event_cb_SalidasActionPerformed

    private void bGenerarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGenerarReporteActionPerformed
        if (checkboxRevisado.isSelected()) {

//            if (JOptionPane.showConfirmDialog(this, "¿Esta Seguro que desea marcar como revisado este Formulario de Mercancía Asignada a Tienda?", "Información", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
//                cabecera.setRevisado(true);
            if (jRadioButtonPendiente.isSelected()) {
                ObjectModelDAO.updateObject(cabecera);
            }
            // cb_Salidas.removeItemAt (cb_Salidas.getSelectedIndex());
            // sw = true;
            // pos = cb_Salidas.getSelectedIndex();
            generarReporte();
            //esto debe colocarse //setCB();
        }

//        } else {
//            JOptionPane.showMessageDialog(this, "Deben Marcar que ha revisado este Formulario de Mercancía Asignada a Tienda");
//        }
    }//GEN-LAST:event_bGenerarReporteActionPerformed

    private void bImprimirEtiquetasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bImprimirEtiquetasActionPerformed
        if (checkboxRevisado.isSelected()) {
            String filePath = "C:/Etiquetado Bulto Miyake/Imprime.bat";
            try {
                createMDB();
                Process p = Runtime.getRuntime().exec(filePath);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Deben Marcar que ha revisado este Formulario de Mercancía Asignada a Tienda");
        }
    }//GEN-LAST:event_bImprimirEtiquetasActionPerformed

    private void checkboxRevisadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxRevisadoActionPerformed
        if (cb_Salidas.getSelectedIndex() == -1 || cb_Salidas.getSelectedItem().equals("Seleccionar")) {
            JOptionPane.showMessageDialog(this, "Seleccione un Formulario de Mercancía Asignada");
            checkboxRevisado.setSelected(false);
            return;
        } else {
            if (checkboxRevisado.isSelected() && JOptionPane.showConfirmDialog(this,
                    "¿Esta Seguro que desea marcar como revisado este Formulario de Mercancía Asignada a Tienda?",
                    "Información", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
                checkboxRevisado.setSelected(false);
            }
            cabecera.setRevisado(checkboxRevisado.isSelected());
            // System.out.println(cabecera.getRevisado());
        }
    }//GEN-LAST:event_checkboxRevisadoActionPerformed
    public static void clearTable(final JTable table) {
        for (int i = 0; i < table.getRowCount(); i++) {
            for (int j = 0; j < table.getColumnCount(); j++) {
                table.setValueAt("", i, j);
            }
        }
    }

    private void jRadioButtonPendienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonPendienteActionPerformed
   
        //setCB_Salidas(false);
        checkboxRevisado.setSelected(false);
        checkboxRevisado.setEnabled(true);
        //clearTable(listadoMercancia);
        listadoMercancia.setModel(new DefaultTableModel());
        fieldAyudante.setText("");
        fieldPersonalDep.setText("");
        fieldTienda.setText("");
        fieldTotal.setText("");
        fieldfecha.setText("");
    }//GEN-LAST:event_jRadioButtonPendienteActionPerformed

    private void jRadioButtonRevisadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonRevisadoActionPerformed

        //setCB_Salidas(true);
        checkboxRevisado.setSelected(true);
        checkboxRevisado.setEnabled(false);
        //clearTable(listadoMercancia);
        listadoMercancia.setModel(new DefaultTableModel());
        fieldAyudante.setText("");
        fieldPersonalDep.setText("");
        fieldTienda.setText("");
        fieldTotal.setText("");
        fieldfecha.setText("");
    }//GEN-LAST:event_jRadioButtonRevisadoActionPerformed

    private void cb_tiendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_tiendaActionPerformed
        if(buttonGrouptipo.getSelection().equals("Revisado")){
             setCB_Salidas(true);
        }
        else{
            setCB_Salidas(false);
        }
        
        //setCB_Salidas(buttonGrouptipo.isSelected(null));
    }//GEN-LAST:event_cb_tiendaActionPerformed

    private void cb_salidasregistradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_salidasregistradasActionPerformed
        if (cb_salidasregistradas.getSelectedIndex() != -1) {
            //listadoMercancia.setModel(new DefaultTableModel());
            return;
        }

        String sql = "";

        String HQL = "SELECT s,ivt.precioConDescuento,ivt.descuento"
                + " FROM SalidaParaTiendaDetalle s,InventarioTienda ivt "
                + " INNER JOIN s.salidaParaTienda spt WHERE spt.idSalida= " + cb_salidasregistradas.getSelectedItem()
                + " AND ivt.producto=s.producto"
                // + " AND spt.revisado = " + tipo
                + " ORDER BY s.nroRenglon ASC";
//                "SELECT s,ppt.precio,ppt.descuento"
//                + " FROM SalidaParaTiendaDetalle s,PrecioProductoTienda ppt INNER JOIN  s.salidaParaTienda spt"
//                + " WHERE spt.idSalida =" + cb_Salidas.getSelectedItem()
//                + " AND ppt.idProducto=s.producto AND ppt.idAlmacen=spt.idAlmacenHasta";

//        cabecera = ObjectModelDAO.getObject((Integer) cb_Salidas.getSelectedItem(), SalidaParaTienda.class);
//        sql = "FROM SalidaParaTiendaDetalle s WHERE s.salidaParaTiendaDetallePK.idSalida ="
//                + cb_Salidas.getSelectedItem();
//        System.out.println(sql);
        resultListProductoSalida = ObjectModelDAO.getResultQuery(HQL);

        if (resultListProductoSalida.isEmpty()) {
            return;
        }

        cabecera = ((SalidaParaTiendaDetalle) ((Object[]) resultListProductoSalida.get(0))[0]).getSalidaParaTienda();

        //SalidaParaTienda cabecera = ((SalidaParaTiendaDetalle) resultListProductoSalida.get(0)).getSalidaParaTienda();
        if (cabecera.getFechaAsignacion() != null) {
            SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd-MM-yyyy");
            fieldfecha.setText(DATE_FORMAT.format(cabecera.getFechaAsignacion()));
        } else {
            fieldfecha.setText("");
        }
        if (cabecera.getIdAlmacenHasta() != null) {
            fieldTienda.setText(cabecera.getIdAlmacenHasta().getNombre());
        } else {
            fieldTienda.setText("");
        }
        if (cabecera.getIdUsuario1() != null) {
            fieldPersonalDep.setText(cabecera.getIdUsuario1().getNombre());
        } else {
            fieldPersonalDep.setText("");
        }
        if (cabecera.getIdUsuario2() != null) {
            fieldAyudante.setText(cabecera.getIdUsuario2().getNombre());
        } else {
            fieldAyudante.setText("");
        }
        if (cabecera.getTotal() != null) {
            fieldTotal.setText(cabecera.getTotal() + "");
        } else {
            fieldTotal.setText("");
        }

        JavaUtil.displayResult(resultListProductoSalida, listadoMercancia);
        listadoMercancia.setEditable(false);
        pos = cb_salidasregistradas.getSelectedIndex();
    }//GEN-LAST:event_cb_salidasregistradasActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bGenerarReporte;
    private javax.swing.JButton bImprimirEtiquetas;
    private javax.swing.ButtonGroup buttonGrouptipo;
    private javax.swing.JComboBox cb_Salidas;
    private javax.swing.JComboBox cb_salidasregistradas;
    private javax.swing.JComboBox cb_tienda;
    private javax.swing.JCheckBox checkboxRevisado;
    private javax.swing.JTextField fieldAyudante;
    private javax.swing.JTextField fieldPersonalDep;
    private javax.swing.JTextField fieldTienda;
    private javax.swing.JTextField fieldTotal;
    private javax.swing.JTextField fieldfecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButtonPendiente;
    private javax.swing.JRadioButton jRadioButtonRevisado;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXTable listadoMercancia;
    private javax.swing.JPanel panelCabezera;
    private javax.swing.JPanel panelFinal;
    private javax.swing.JPanel panelTabla;
    // End of variables declaration//GEN-END:variables
}
