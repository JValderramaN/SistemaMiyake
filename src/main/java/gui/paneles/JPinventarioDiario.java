/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.paneles;

import gui.dialogos.JDfaturasCSV;
import clases.csv.CSVreader;
import clases.IVDDComparator;
import modelos.mapeos.InventarioDiario;
import hibernate.DAO.DaoQuery;
import util.JavaUtil;
import hibernate.DAO.ObjectModelDAO;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import java.util.List;
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import javax.swing.table.DefaultTableModel;
import org.hibernate.Criteria;
import org.hibernate.FetchMode;
import org.hibernate.Query;
import org.hibernate.criterion.Restrictions;
import modelos.mapeos.Almacen;
import modelos.mapeos.InventarioDiarioDetalle;
import modelos.mapeos.InventarioTienda;
import modelos.tablas.TableModelReport;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Usuario
 */
public class JPinventarioDiario extends javax.swing.JPanel {

    private List<InventarioDiarioDetalle> ivdDetalle;
    private InventarioDiario ivd;
    private static final IVDDComparator comparator_ivdd = new IVDDComparator();
    private List resultListAlmacen = null;
    private boolean crear;
    public final String rutaJasper = "/reportes/ReporteInventarioDiario.jasper";
    public final InputStream rutaJrxml = this.getClass().getResourceAsStream("/reportes/ReporteInventarioDiario.jrxml");
    private String rutaImagen = "src/main/resources/imagenes/Salir.png";
    private JDfaturasCSV jdFacturasCSV = null;

    public JPinventarioDiario() {
        initComponents();

        String sql = "FROM Almacen a order by a.idAlmacen asc";
        resultListAlmacen = ObjectModelDAO.getResultQuery(sql);
        cb_tiendas.removeAllItems();
        cb_tiendas.addItem(JavaUtil.cons_seleccionar);
        for (Object object : resultListAlmacen) {
            Almacen a = (Almacen) object;
            cb_tiendas.addItem(a.getNombre());
        }

        mes.setSelectedIndex(Calendar.getInstance().get(Calendar.MONTH));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jdfecha = new javax.swing.JDialog();
        fecha = new org.jdesktop.swingx.JXMonthView();
        cancelar = new javax.swing.JButton();
        panelfinal = new javax.swing.JPanel();
        recalcular = new javax.swing.JButton();
        imprimir = new javax.swing.JButton();
        guardar = new javax.swing.JButton();
        panelcabezera = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        nombreAlmacen = new javax.swing.JLabel();
        rifAlmacen = new javax.swing.JLabel();
        cb_tiendas = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        seleccionar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        total_facturas = new javax.swing.JLabel();
        detalles = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        mes = new javax.swing.JComboBox();
        saldoanterior = new javax.swing.JLabel();
        paneltabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new org.jdesktop.swingx.JXTable();
        busy = new org.jdesktop.swingx.JXBusyLabel();
        direccionAlmacen = new javax.swing.JLabel();

        jdfecha.setMinimumSize(new java.awt.Dimension(185, 129));
        jdfecha.setModal(true);
        jdfecha.setResizable(false);
        jdfecha.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                jdfechaComponentHidden(evt);
            }
        });
        jdfecha.getContentPane().setLayout(new java.awt.FlowLayout());

        fecha.setToolTipText("Doble click para elegir Fecha");
        fecha.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fecha.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fechaMouseClicked(evt);
            }
        });
        jdfecha.getContentPane().add(fecha);

        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });
        jdfecha.getContentPane().add(cancelar);

        setLayout(new java.awt.BorderLayout());

        recalcular.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1416789278_history_clear.png"))); // NOI18N
        recalcular.setText("Recalcular");
        recalcular.setPreferredSize(new java.awt.Dimension(71, 23));
        recalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recalcularActionPerformed(evt);
            }
        });

        imprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1418331399_Print.png"))); // NOI18N
        imprimir.setText("Imprimir");
        imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirActionPerformed(evt);
            }
        });

        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/database_save.png"))); // NOI18N
        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelfinalLayout = new javax.swing.GroupLayout(panelfinal);
        panelfinal.setLayout(panelfinalLayout);
        panelfinalLayout.setHorizontalGroup(
            panelfinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelfinalLayout.createSequentialGroup()
                .addContainerGap(486, Short.MAX_VALUE)
                .addGroup(panelfinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(recalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelfinalLayout.createSequentialGroup()
                        .addComponent(imprimir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guardar)))
                .addContainerGap())
        );
        panelfinalLayout.setVerticalGroup(
            panelfinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelfinalLayout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(recalcular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelfinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardar)
                    .addComponent(imprimir))
                .addGap(7, 7, 7))
        );

        add(panelfinal, java.awt.BorderLayout.SOUTH);

        panelcabezera.setLayout(new javax.swing.BoxLayout(panelcabezera, javax.swing.BoxLayout.LINE_AXIS));

        logo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        logo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoMouseClicked(evt);
            }
        });

        nombreAlmacen.setText(" ");

        rifAlmacen.setText(" ");

        cb_tiendas.setMaximumSize(new java.awt.Dimension(300, 300));
        cb_tiendas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_tiendasActionPerformed(evt);
            }
        });

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1417636330_store.png"))); // NOI18N
        jLabel7.setText("Tienda");

        seleccionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1417901536_internt_web_technology-02-16.png"))); // NOI18N
        seleccionar.setText("Cargar Archivo de Factura");
        seleccionar.setToolTipText("Para cálculo de factura");
        seleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1418331485_coins.png"))); // NOI18N
        jLabel3.setText("Total:");

        total_facturas.setText(" ");
        total_facturas.setToolTipText("Doble click para agregar a la salida seleccionada");
        total_facturas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        total_facturas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        total_facturas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                total_facturasMouseClicked(evt);
            }
        });

        detalles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1416792810_033.png"))); // NOI18N
        detalles.setText("Ver Detalles");
        detalles.setEnabled(false);
        detalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detallesActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel4.setText("Hacer Doble Click para Sustituir");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 22)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1417636172_20.png"))); // NOI18N
        jLabel1.setText("INVENTARIO DIARIO");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rifAlmacen, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                                    .addComponent(nombreAlmacen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(10, 10, 10))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addContainerGap())))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cb_tiendas, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(total_facturas, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(detalles))
                    .addComponent(seleccionar)
                    .addComponent(jLabel4)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_tiendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(seleccionar))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(nombreAlmacen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rifAlmacen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(detalles, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(total_facturas)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(8, 8, 8))
        );

        panelcabezera.add(jPanel3);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1416789180_Timetable.png"))); // NOI18N
        jLabel2.setText("MES:");

        mes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ENERO", "FEBRERO", "MARZO", "MAYO", "ABRIL", "JUNIO", "JULIO", "AGOSTO", "SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE" }));
        mes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mesActionPerformed(evt);
            }
        });

        saldoanterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1418331485_coins.png"))); // NOI18N
        saldoanterior.setText("0.0");
        saldoanterior.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(saldoanterior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mes, 0, 127, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(208, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(mes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saldoanterior)
                .addGap(13, 13, 13))
        );

        panelcabezera.add(jPanel4);

        add(panelcabezera, java.awt.BorderLayout.NORTH);

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Concepto", "Entrada", "Salida", "Saldo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setToolTipText("Flecha hacia abajo para agregar renglón. Doble click en Fecha para agregar fecha");
        tabla.setSortable(false);
        tabla.getTableHeader().setReorderingAllowed(false);
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        tabla.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tablaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        busy.setDirection(org.jdesktop.swingx.painter.BusyPainter.Direction.RIGHT);
        busy.setVisible(false);

        direccionAlmacen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        direccionAlmacen.setText(" ");

        javax.swing.GroupLayout paneltablaLayout = new javax.swing.GroupLayout(paneltabla);
        paneltabla.setLayout(paneltablaLayout);
        paneltablaLayout.setHorizontalGroup(
            paneltablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
            .addComponent(direccionAlmacen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(paneltablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneltablaLayout.createSequentialGroup()
                    .addContainerGap(329, Short.MAX_VALUE)
                    .addComponent(busy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(329, Short.MAX_VALUE)))
        );
        paneltablaLayout.setVerticalGroup(
            paneltablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneltablaLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(direccionAlmacen, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
            .addGroup(paneltablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneltablaLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(busy, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(163, Short.MAX_VALUE)))
        );

        add(paneltabla, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void setNulls() {
        nombreAlmacen.setText("");
        rifAlmacen.setText("");
        direccionAlmacen.setText("");
        logo.setIcon(null);
        saldoanterior.setText("");
        ivd = null;
        ivdDetalle = null;
        tabla.setModel(new DefaultTableModel());
    }

    private void iniciarInventario() {
        setNulls();

        Thread hilo = new Thread() {
            @Override
            public void run() {

                int mess = mes.getSelectedIndex();
                int opc;
                busy.setVisible(true);
                busy.setBusy(true);

                Almacen alc = (Almacen) resultListAlmacen.get(cb_tiendas.getSelectedIndex() - 1);

                nombreAlmacen.setText(alc.getNombre());
                rifAlmacen.setText("RIF: " + alc.getRif() == null ? "" : alc.getRif());
                direccionAlmacen.setText(alc.getIdUbicacion() == null
                        ? "" : alc.getIdUbicacion().toString());

                JavaUtil.preCambio(alc.getLogo(), logo);

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                Calendar primero = Calendar.getInstance();
                //si el mes actual es mayor al mes seleccionado, entonces no puede crear ivd nuevo
                //sino si puede crear
                //mm:muestra  cr:crear y modificar na:nada

                //el mes seleccionado es mayor al actual
                if (primero.get(Calendar.MONTH) < mess) {//na
                    tabla.setEditable(false);
                    recalcular.setEnabled(false);
                    guardar.setEnabled(false);
                    opc = 3;
                    JOptionPane.showMessageDialog(null, "No es posible CREAR un inventario diario en un mes FUTURO");
                } else {
                    //el mes seleccionado es igual al actual
                    if (primero.get(Calendar.MONTH) == mess) {//cr
                        tabla.setEditable(true);
                        recalcular.setEnabled(true);
                        guardar.setEnabled(true);
                        opc = 2;
                        //el mes seleccionado es menor al actual
                    } else {//mm
                        tabla.setEditable(false);
                        recalcular.setEnabled(false);
                        guardar.setEnabled(false);
                        opc = 1;
                        JOptionPane.showMessageDialog(null, "No es posible MODIFICAR un inventario diario en un mes PASADO");
                    }
                }

                if (opc != 3) {//si no fue futuro
                    primero.set(Calendar.MONTH, mess);
                    primero.set(Calendar.DAY_OF_MONTH, 1);
                    Calendar ultimo = Calendar.getInstance();
                    ultimo.set(Calendar.MONTH, mess);
                    ultimo.set(Calendar.DAY_OF_MONTH, ultimo.getActualMaximum(Calendar.DAY_OF_MONTH));

                    String hql = "FROM  InventarioDiario ivd WHERE ivd.fecha >= :primerof "
                            + "AND ivd.fecha<=:ultimof "
                            + "AND ivd.idAlmacen=:alcm";

                    DaoQuery q = ObjectModelDAO.createQueryDAO(hql);
                    q.getQuery().setTimestamp("primerof", primero.getTime());
                    q.getQuery().setTimestamp("ultimof", ultimo.getTime());
                    q.getQuery().setParameter("alcm", alc);

                    List rsl = ObjectModelDAO.getResultQuery(q);

                    if (rsl.size() == 1) {//hay un inventario diario
                        ivd = (InventarioDiario) rsl.get(0);
                        saldoanterior.setText(ivd.getSaldoInicial() + "");

                        ivdDetalle = (List) ivd.getInventarioDiarioDetalleCollection();
                        if (ivdDetalle.size() == 0) {
                            ivdDetalle.add(new InventarioDiarioDetalle());
                        }
                        Collections.sort(ivdDetalle, comparator_ivdd);
                        JavaUtil.displayResult(ivdDetalle, tabla);
                        tabla.packAll();
                        crear = false;
                    } else {
                        if (rsl.isEmpty() && opc == 2) {//no hay inventario diario, se crea
                            ivd = new InventarioDiario();
                            ivdDetalle = new ArrayList<>();
                            ivdDetalle.add(new InventarioDiarioDetalle());
                            ivd.setInventarioDiarioDetalleCollection(ivdDetalle);
                            ivd.setIdAlmacen(alc);
                            JavaUtil.displayResult(ivdDetalle, tabla);
                            tabla.packAll();

                            //verifica si existe un inventario diario en el mes pasado, sino se ajusta 
                            //al intentario de tienda actual
                            primero.set(Calendar.MONTH, mess - 1);
                            primero.set(Calendar.DAY_OF_MONTH, 1);
                            ultimo.set(Calendar.MONTH, mess - 1);
                            ultimo.set(Calendar.DAY_OF_MONTH, ultimo.getActualMaximum(Calendar.DAY_OF_MONTH));
                            hql = "FROM  InventarioDiario ivd WHERE ivd.fecha >= :primerof "
                                    + "AND ivd.fecha<=:ultimof "
                                    + "AND ivd.idAlmacen=:alcm";

                            q = ObjectModelDAO.createQueryDAO(hql);
                            q.getQuery().setTimestamp("primerof", primero.getTime());
                            q.getQuery().setTimestamp("ultimof", ultimo.getTime());
                            q.getQuery().setParameter("alcm", alc);

                            rsl = ObjectModelDAO.getResultQuery(q);
                            if (rsl.size() == 1) {//hay un inventario diario del mes anterior
                                InventarioDiario ivd2 = (InventarioDiario) rsl.get(0);
                                saldoanterior.setText(ivd2.getSaldoFinal() + "");
                                ivd.setSaldoInicial(ivd2.getSaldoFinal());
                            } else {
                                if (rsl.isEmpty()) {//no hay inventario diario del mes anterior
                                    // se extrae del calculo de todo el inventario tienda del almacen
                                    Float total = 0f;
                                    hql = "FROM  InventarioTienda ivt WHERE ivt.almacen=:alcm AND ivt.cantidad>0";
                                    q = ObjectModelDAO.createQueryDAO(hql);
                                    q.getQuery().setParameter("alcm", alc);
                                    rsl = ObjectModelDAO.getResultQuery(q);
                                    for (Object inventario : rsl) {
                                        InventarioTienda ivtInterno = (InventarioTienda) inventario;
                                        total += ivtInterno.getPrecioConDescuento() * ivtInterno.getCantidad();
                                    }

                                    ivd.setSaldoInicial(Float.parseFloat(JavaUtil.dosDecimales.format(total).replace(",", ".")));
                                    saldoanterior.setText(ivd.getSaldoInicial() + "");
                                } else {//hay muchos inventarios del mes anterior y es un error
                                    JOptionPane.showMessageDialog(null, "Hay un error, existe mas de "
                                            + "1 inventario diario para el mes anterior");
                                    crear = false;
                                }
                            }

                            crear = true;
                        } else {//hay muchos y es un error
                            if (rsl.size() > 1) {
                                JOptionPane.showMessageDialog(null, "Hay un error, existe mas de "
                                        + "1 inventario diario para este mes");
                                crear = false;
                            }
                        }
                    }
                }
                if (tabla.getRowCount() > 0 && tabla.isEditable()) {
                    tabla.getColumnExt(0).setEditable(false);
                }
                imprimir.setEnabled(tabla.getRowCount() > 0 || crear);
                busy.setVisible(false);
                busy.setBusy(false);
            }

        };
        hilo.start();
    }

    private boolean filaCorrecta(int i) {
        Object o0 = tabla.getModel().getValueAt(i, 0);
        Object o1 = tabla.getModel().getValueAt(i, 1);
        Object o2 = tabla.getModel().getValueAt(i, 2);
        Object o3 = tabla.getModel().getValueAt(i, 3);
        Object o4 = tabla.getModel().getValueAt(i, 4);
        if ((o0 != null && !o0.equals(""))//el primero debe estar
                && (o1 != null && !o1.equals(""))//el segundo debe estar
                && ((o2 != null && !o2.equals(""))//el tercero puede estar
                || (o3 != null && !o3.equals(""))//el cuarto puede estar
                || (o4 != null && !o4.equals(""))))//el quinto puede estar
        {
            return true;
        }
        return false;
    }

    private boolean isVacia(String str) {
        return str == null || str.equals("");
    }

    private void fechaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fechaMouseClicked
        if (evt.getClickCount() == 2) {
            jdfecha.setVisible(false);
        }
    }//GEN-LAST:event_fechaMouseClicked

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        fecha.setSelectionDate(null);
        jdfecha.setVisible(false);
    }//GEN-LAST:event_cancelarActionPerformed

    private void jdfechaComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jdfechaComponentHidden
        if (fecha.getSelectionDate() != null) {
            tabla.getModel().setValueAt(new SimpleDateFormat("yyyy-MM-dd").format(fecha.getSelectionDate()), tabla.getSelectedRow(), 0);
        }
    }//GEN-LAST:event_jdfechaComponentHidden

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked

        if (evt.getClickCount() == 2 && tabla.isEditable()) {
            if (tabla.getSelectedColumn() == 0) {
                jdfecha.pack();
                jdfecha.setVisible(true);
            }

        }

    }//GEN-LAST:event_tablaMouseClicked

    private void tablaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaKeyReleased

        int keyCode = evt.getKeyCode();
        if (evt.getKeyCode() == KeyEvent.VK_DOWN && tabla.isEditable()) {
            int rowCount = tabla.getRowCount();
            int rowSelected = tabla.getSelectedRow();
            //si la fila seleccionada es la ultima
            if (rowSelected == rowCount - 1) {//0 hasta n-1
                if (filaCorrecta(rowSelected)) {
                    ((DefaultTableModel) tabla.getModel()).addRow(new Object[tabla.getColumnCount()]);
                    tabla.setRowSelectionInterval(rowCount, rowCount);//se agrego una nueva asi que si se toma en cuenta n
                }
            }
        }
    }//GEN-LAST:event_tablaKeyReleased

    private void logoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_logoMouseClicked

    private void mesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mesActionPerformed
        if (mes.getSelectedIndex() != -1 && cb_tiendas.getSelectedIndex() != -1
                && !cb_tiendas.getSelectedItem().equals(JavaUtil.cons_seleccionar)) {
//            System.out.println("accion");
            iniciarInventario();
        }
    }//GEN-LAST:event_mesActionPerformed

    private void total_facturasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_total_facturasMouseClicked
        if (evt.getClickCount() == 2 && tabla.getSelectedRow() != -1 && !total_facturas.getText().equals("")
                && tabla.isEditable()) {
            tabla.getModel().setValueAt(total_facturas.getText(), tabla.getSelectedRow(), 3);
        }
    }//GEN-LAST:event_total_facturasMouseClicked

    private void detallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detallesActionPerformed
        if (jdFacturasCSV != null) {
            jdFacturasCSV.setVisible(true);
        }
    }//GEN-LAST:event_detallesActionPerformed

    private void cb_tiendasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_tiendasActionPerformed
        if (cb_tiendas.getSelectedIndex() != -1 && cb_tiendas.getSelectedItem().equals(JavaUtil.cons_seleccionar)) {
            imprimir.setEnabled(false);
            guardar.setEnabled(false);
            recalcular.setEnabled(false);
            tabla.setModel(new DefaultTableModel());
            return;
        }

        if (mes.getSelectedIndex() != -1 && cb_tiendas.getSelectedIndex() != -1
                && !cb_tiendas.getSelectedItem().equals(JavaUtil.cons_seleccionar)) {
            //            System.out.println("accion");
            iniciarInventario();
        }
    }//GEN-LAST:event_cb_tiendasActionPerformed

    private void recalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recalcularActionPerformed
        int rows = tabla.getRowCount();
        if (rows <= 0) {
            return;
        }

        String data1 = (String) tabla.getModel().getValueAt(0, 2);
        String data2 = (String) tabla.getModel().getValueAt(0, 3);
        tabla.getModel().setValueAt(
                JavaUtil.dosDecimales.format(
                        Float.parseFloat(saldoanterior.getText().replace(",", "."))//el original
                        + (isVacia(data1)
                                ? 0f : Float.parseFloat(data1.replace(",", ".")))
                        - (isVacia(data2)
                                ? 0f : Float.parseFloat(data2.replace(",", ".")))).replace(",", "."), 0, 4);
        for (int i = 1; i < rows; i++) {//el primero ya lo guardo
            data1 = (String) tabla.getModel().getValueAt(i, 2);
            data2 = (String) tabla.getModel().getValueAt(i, 3);
            tabla.getModel().setValueAt(
                    JavaUtil.dosDecimales.format(
                            Float.parseFloat(((String) tabla.getModel().getValueAt(i - 1, 4)).replace(",", "."))//la anterior
                            + (isVacia(data1)
                                    ? 0f : Float.parseFloat(data1.replace(",", ".")))
                            - (isVacia(data2)
                                    ? 0f : Float.parseFloat(data2.replace(",", ".")))).replace(",", "."), i, 4);
        }


    }//GEN-LAST:event_recalcularActionPerformed

    private void imprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirActionPerformed
        int rows = tabla.getRowCount();
        if (rows <= 0) {
            return;
        }
        try {
            JasperPrint jasperPrint = null;

            Map<String, Object> parametro = new HashMap<>();

//            BufferedImage imagen = ImageIO.read(getClass().getResource("/imagenes/boton-inicio.png"));
//
//            parametro.put("ImagenLogo", imagen);
            parametro.put("Tienda", nombreAlmacen.getText());
            parametro.put("Direccion", direccionAlmacen.getText());
            parametro.put("Mes", mes.getSelectedItem());
            parametro.put("Rif", rifAlmacen.getText());

            TableModelReport dataSourse = new TableModelReport(tabla.getModel());
            parametro.put("REPORT_DATA_SOURSE", dataSourse);

            JasperReport reporte = (JasperReport) JRLoader.loadObject(this.getClass().getResourceAsStream(rutaJasper));
            jasperPrint = JasperFillManager.fillReport(reporte, parametro, dataSourse);
            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);
            jasperViewer.setTitle("Reporte de Inventario Diario");
            jasperViewer.setVisible(true);

        } catch (JRException e) {
            JOptionPane.showMessageDialog(this, "error" + e);
        }

    }//GEN-LAST:event_imprimirActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        int rows = tabla.getRowCount();
        if (rows <= 0) {
            return;
        }

        if (JOptionPane.showConfirmDialog(null, "¿Desea recalcular entes de guardar?", "Sugerencia", JOptionPane.YES_NO_OPTION)
                == JOptionPane.YES_OPTION) {
            recalcularActionPerformed(null);
        }

        if (Double.parseDouble((String) tabla.getValueAt(tabla.getRowCount() - 1, tabla.getColumnCount() - 1)) < 0) {
            JOptionPane.showMessageDialog(null, "El renglón total es negativo, por favor revifique y recalcule");
            return;
        }

        int elementosDetalle = ivdDetalle.size();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String filas_incorrectas = "";
        String data;
        int errores = 0;
        for (int i = 0; i < rows; i++) {
            if (filaCorrecta(i)) {
                try {
                    //si aun sigue bajo la cantidad de la lista, copia la referencia actual
                    //sino crea uno nuevo
                    InventarioDiarioDetalle ivdDetIterador = i < elementosDetalle
                            ? ivdDetalle.get(i) : new InventarioDiarioDetalle();

                    ivdDetIterador.setFecha(sdf.parse((String) tabla.getValueAt(i, 0)));

                    ivdDetIterador.setConcepto((String) tabla.getValueAt(i, 1));

                    data = (String) tabla.getValueAt(i, 2);

                    ivdDetIterador.setEntrada(isVacia(data) ? 0f
                            : Float.parseFloat(data.replace(",", ".")));

                    data = (String) tabla.getValueAt(i, 3);

                    ivdDetIterador.setSalida(isVacia(data) ? 0f
                            : Float.parseFloat(data.replace(",", ".")));

                    data = (String) tabla.getValueAt(i, 4);

                    ivdDetIterador.setSaldo(isVacia(data) ? 0f
                            : Float.parseFloat(data.replace(",", ".")));

                    if (crear) {
                        ivdDetIterador.setIdInventarioDiario(ivd);
                    }

                    //si aun esta bajo la cantidad de la lista, solo modifica
                    if (i < elementosDetalle) {
                        ivdDetalle.set(i, ivdDetIterador);
                    } else {//si ya paso la cantidad de la lista inicial, ahora guarda lo sobrante de la tabla
                        ivdDetIterador.setIdInventarioDiario(ivd);
                        ivdDetalle.add(ivdDetIterador);

                    }
                } catch (Exception ex) {
                    Logger.getLogger(JPinventarioDiario.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                filas_incorrectas += (i + 1) + "\n";
                errores++;
            }
        }

        if (errores > 0) {
            JOptionPane.showMessageDialog(null, "Existen " + errores + " errore(s) en los siguientes renglones, porfavor revisar:\n" + filas_incorrectas);
            return;
        }

        float totalIVD = ivdDetalle.get(ivdDetalle.size() - 1).getSaldo();
        //si es negativo error
        if (totalIVD < 0) {
            JOptionPane.showMessageDialog(null, "Saldo final negativo, porfavor revisar.");
            return;
        }

        //guarda el saldo final en el ivd
        ivd.setSaldoFinal(totalIVD);

        if (crear) {
            ObjectModelDAO.saveObject(ivd);
            crear = false;
        } else {
            ObjectModelDAO.updateObject(ivd);
        }

        JOptionPane.showMessageDialog(null, "Operacion realizada con exito");
    }//GEN-LAST:event_guardarActionPerformed

    private void seleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarActionPerformed
        if (jdFacturasCSV == null) {
            jdFacturasCSV = new JDfaturasCSV(null, true);
        }

        if (cb_tiendas.getSelectedIndex() > 0) {//toma en cuenta el seleccionar que es 0
            jdFacturasCSV.cb_tiendas.setSelectedItem(cb_tiendas.getSelectedItem());
        }

        jdFacturasCSV.setVisible(true);

        if (jdFacturasCSV.getIvtDiario() != null) {
            total_facturas.setText(JavaUtil.dosDecimales.format(jdFacturasCSV.getIvtDiario().getTotalConIva()).replace(",", "."));
            detalles.setEnabled(true);
        } else {
            total_facturas.setText("");
            detalles.setEnabled(false);
        }
    }//GEN-LAST:event_seleccionarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXBusyLabel busy;
    private javax.swing.JButton cancelar;
    private javax.swing.JComboBox cb_tiendas;
    private javax.swing.JButton detalles;
    private javax.swing.JLabel direccionAlmacen;
    private org.jdesktop.swingx.JXMonthView fecha;
    private javax.swing.JButton guardar;
    private javax.swing.JButton imprimir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JDialog jdfecha;
    private javax.swing.JLabel logo;
    private javax.swing.JComboBox mes;
    private javax.swing.JLabel nombreAlmacen;
    private javax.swing.JPanel panelcabezera;
    private javax.swing.JPanel panelfinal;
    private javax.swing.JPanel paneltabla;
    private javax.swing.JButton recalcular;
    private javax.swing.JLabel rifAlmacen;
    private javax.swing.JLabel saldoanterior;
    private javax.swing.JButton seleccionar;
    private org.jdesktop.swingx.JXTable tabla;
    private javax.swing.JLabel total_facturas;
    // End of variables declaration//GEN-END:variables
}
