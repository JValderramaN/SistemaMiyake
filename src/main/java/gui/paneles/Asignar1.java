/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.paneles;

import gui.dialogos.JDInventarioTienda;
import gui.ventanas.JFInicioSecionMiyake;
import gui.ventanas.FventanaIncial;
import util.almacen.DetalleRegistro;
import modelos.tablas.ModeloTablaDetalleRegistroAsignacion;
import hibernate.DAO.ObjectModelDAO;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.util.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import modelos.mapeos.Almacen;
import modelos.mapeos.InventarioTienda;
import modelos.mapeos.InventarioTiendaPK;
import modelos.mapeos.SalidaParaTienda;
import modelos.mapeos.SalidaParaTiendaDetalle;
import modelos.mapeos.SalidaParaTiendaDetallePK;
import modelos.mapeos.Usuario;
import org.hibernate.Query;
import static gui.ventanas.JFInicioSecionMiyake.resultListUsuarios;
import java.awt.Dialog.ModalExclusionType;
import modelos.tablas.TableModelReport;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Pablo
 */
public class Asignar1 extends javax.swing.JPanel {

    Usuario ususrioActual = null;
    Usuario user = JFInicioSecionMiyake.us1;
    Almacen tiendaHasta = null;
    Almacen almacenDesde = null;
    List resultListAlmacen = null;
    List resultListInventarioTienda = null;
    //List inventarioTiendaHasta = null;
    private int renglon = 1;

    InventarioTienda inv = null;
    InventarioTienda invAux = null;
    int posUs = -1;
    int posTi = -1;
    int posTi2 = -1;
    private DetalleRegistro deReg;
    List<DetalleRegistro> listaDetalle = new ArrayList<>();
    ModeloTablaDetalleRegistroAsignacion modeloTablaAsignacion = new ModeloTablaDetalleRegistroAsignacion();
    private int pos_almacen = -1;

    /**
     * Creates new form NewJPanel
     */
    public Asignar1() {
        initComponents();
        //ComboBoxAlmacenes
        this.TablaDetalleRegistrosAsignacionMercancia1.setModel(modeloTablaAsignacion);
        cargarComboBoxAlmacen();
//        posTi = this.comboBoxAlmacen.getSelectedIndex();
//        tiendaHasta = (Almacen) resultListAlmacen.get(posTi);
//        System.err.println("Index Sleccion podTi, lod  dstpd Son : " + tiendaHasta.getNombre() );
//        Almacen al = (Almacen) this.comboBoxAlmacen.getSelectedItem();
//        System.err.println("Almacen Seleccionado Objeto : " + al.getNombre()+al.getIdAlmacen() );
//        
        //Usuarios
        List<List> resultListUsuarios = FventanaIncial.listaUsuarioMain;
        comboBoxUsuarios.removeAllItems();
        for (Object object : resultListUsuarios) {
            Usuario u = (Usuario) object;
            comboBoxUsuarios.addItem(u.getNombre() + " :" + u.getDescripcion());

        }

        this.comboBoxUsuarios.setSelectedIndex(-1);

        this.busy.setVisible(false);
        this.busy1.setVisible(false);

    }

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new Asignar1().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Asignar1.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jLayeredPanePrincipal = new javax.swing.JLayeredPane();
        jXTaskPaneCabeceraAsignacion = new org.jdesktop.swingx.JXTaskPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLayeredPaneTienda = new javax.swing.JLayeredPane();
        jXLabel2 = new org.jdesktop.swingx.JXLabel();
        jXButtonConfirmar = new org.jdesktop.swingx.JXButton();
        jXLabel1 = new org.jdesktop.swingx.JXLabel();
        comboBoxTiendaHasta = new javax.swing.JComboBox();
        comboBoxUsuarios = new javax.swing.JComboBox();
        jXButtonReiniciar = new org.jdesktop.swingx.JXButton();
        comboBoxAlmacenDesde = new javax.swing.JComboBox();
        jXLabel10 = new org.jdesktop.swingx.JXLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jLayeredPaneProductos = new javax.swing.JLayeredPane();
        jLayeredPaneBuscarProducto = new javax.swing.JLayeredPane();
        jXLabel7 = new org.jdesktop.swingx.JXLabel();
        txtBusqueda = new org.jdesktop.swingx.JXTextField();
        jXButtonBuscar = new org.jdesktop.swingx.JXButton();
        comboBoxTipoBusqueda = new javax.swing.JComboBox();
        botonListarProductosInventariTienda = new org.jdesktop.swingx.JXButton();
        jLayeredPaneDatosProductos = new javax.swing.JLayeredPane();
        txtDescripcion = new org.jdesktop.swingx.JXTextField();
        txtExistencia = new org.jdesktop.swingx.JXTextField();
        jXLabel6 = new org.jdesktop.swingx.JXLabel();
        txtReferencia = new org.jdesktop.swingx.JXTextField();
        txtCodigo = new org.jdesktop.swingx.JXTextField();
        jXLabel3 = new org.jdesktop.swingx.JXLabel();
        jXLabel5 = new org.jdesktop.swingx.JXLabel();
        labelReferencia = new org.jdesktop.swingx.JXLabel();
        botonAgregar = new org.jdesktop.swingx.JXButton();
        jXLabel4 = new org.jdesktop.swingx.JXLabel();
        txtMarca = new org.jdesktop.swingx.JXTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jXLabel8 = new org.jdesktop.swingx.JXLabel();
        txtCantidad = new org.jdesktop.swingx.JXTextField();
        jXLabel9 = new org.jdesktop.swingx.JXLabel();
        txtNroBulto = new org.jdesktop.swingx.JXTextField();
        botonLimpiarAgregar = new org.jdesktop.swingx.JXButton();
        jXButtonUbicacbionProducto = new org.jdesktop.swingx.JXButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        TablaDetalleRegistrosAsignacionMercancia1 = new javax.swing.JTable();
        jXButtonTotalizar = new org.jdesktop.swingx.JXButton();
        jXButtonAsignarMercancia = new org.jdesktop.swingx.JXButton();
        jXButtonImprimir_ = new org.jdesktop.swingx.JXButton();
        busy = new org.jdesktop.swingx.JXBusyLabel();
        busy1 = new org.jdesktop.swingx.JXBusyLabel();
        jXButtonReiniciarFooter = new org.jdesktop.swingx.JXButton();

        setToolTipText("");
        setAutoscrolls(true);
        setLayout(new java.awt.BorderLayout());

        jLayeredPanePrincipal.setAutoscrolls(true);

        jXTaskPaneCabeceraAsignacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1416789183_data-16.png"))); // NOI18N
        jXTaskPaneCabeceraAsignacion.setTitle("Cabecera Asignacion.");

        jLayeredPaneTienda.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionar Datos Para Asignar Mercancia"));
        jLayeredPaneTienda.setPreferredSize(new java.awt.Dimension(610, 150));

        jXLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/responsable1.png"))); // NOI18N
        jXLabel2.setText("Responsable");

        jXButtonConfirmar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/conect.png"))); // NOI18N
        jXButtonConfirmar.setText("Confirmar");
        jXButtonConfirmar.setToolTipText("");
        jXButtonConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXButtonConfirmarActionPerformed(evt);
            }
        });

        jXLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1417636330_store.png"))); // NOI18N
        jXLabel1.setText("   Tienda");

        comboBoxTiendaHasta.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboBoxUsuarios.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jXButtonReiniciar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/reiniciar.png"))); // NOI18N
        jXButtonReiniciar.setText("Reiniciar");
        jXButtonReiniciar.setEnabled(false);
        jXButtonReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXButtonReiniciarActionPerformed(evt);
            }
        });

        comboBoxAlmacenDesde.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxAlmacenDesde.setToolTipText("");

        jXLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1417636232_09.png"))); // NOI18N
        jXLabel10.setText("  Almacen");

        javax.swing.GroupLayout jLayeredPaneTiendaLayout = new javax.swing.GroupLayout(jLayeredPaneTienda);
        jLayeredPaneTienda.setLayout(jLayeredPaneTiendaLayout);
        jLayeredPaneTiendaLayout.setHorizontalGroup(
            jLayeredPaneTiendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneTiendaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPaneTiendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jXLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPaneTiendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jLayeredPaneTiendaLayout.createSequentialGroup()
                        .addComponent(comboBoxUsuarios, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jXButtonConfirmar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(11, 11, 11)
                        .addComponent(jXButtonReiniciar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(172, 172, 172))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jLayeredPaneTiendaLayout.createSequentialGroup()
                        .addGroup(jLayeredPaneTiendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboBoxTiendaHasta, javax.swing.GroupLayout.Alignment.LEADING, 0, 588, Short.MAX_VALUE)
                            .addComponent(comboBoxAlmacenDesde, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(27, 27, 27))))
        );
        jLayeredPaneTiendaLayout.setVerticalGroup(
            jLayeredPaneTiendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPaneTiendaLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jLayeredPaneTiendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxAlmacenDesde))
                .addGap(11, 11, 11)
                .addGroup(jLayeredPaneTiendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxTiendaHasta)
                    .addComponent(jXLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jLayeredPaneTiendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBoxUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLayeredPaneTiendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jXLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jXButtonConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jXButtonReiniciar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33))
        );
        jLayeredPaneTienda.setLayer(jXLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneTienda.setLayer(jXButtonConfirmar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneTienda.setLayer(jXLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneTienda.setLayer(comboBoxTiendaHasta, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneTienda.setLayer(comboBoxUsuarios, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneTienda.setLayer(jXButtonReiniciar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneTienda.setLayer(comboBoxAlmacenDesde, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneTienda.setLayer(jXLabel10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane3.setViewportView(jLayeredPaneTienda);

        javax.swing.GroupLayout jXTaskPaneCabeceraAsignacionLayout = new javax.swing.GroupLayout(jXTaskPaneCabeceraAsignacion.getContentPane());
        jXTaskPaneCabeceraAsignacion.getContentPane().setLayout(jXTaskPaneCabeceraAsignacionLayout);
        jXTaskPaneCabeceraAsignacionLayout.setHorizontalGroup(
            jXTaskPaneCabeceraAsignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 726, Short.MAX_VALUE)
            .addGroup(jXTaskPaneCabeceraAsignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE))
        );
        jXTaskPaneCabeceraAsignacionLayout.setVerticalGroup(
            jXTaskPaneCabeceraAsignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 155, Short.MAX_VALUE)
            .addGroup(jXTaskPaneCabeceraAsignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jXTaskPaneCabeceraAsignacionLayout.createSequentialGroup()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );

        jScrollPane4.setAutoscrolls(true);

        jLayeredPaneProductos.setBorder(javax.swing.BorderFactory.createTitledBorder("Productos"));
        jLayeredPaneProductos.setAutoscrolls(true);

        jLayeredPaneBuscarProducto.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar"));

        jXLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/tipo.png"))); // NOI18N
        jXLabel7.setText("Tipo Busqueda");

        txtBusqueda.setForeground(new java.awt.Color(212, 208, 200));
        txtBusqueda.setEnabled(false);
        txtBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyTyped(evt);
            }
        });

        jXButtonBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/buscar2.png"))); // NOI18N
        jXButtonBuscar.setText("Buscar");
        jXButtonBuscar.setEnabled(false);
        jXButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXButtonBuscarActionPerformed(evt);
            }
        });

        comboBoxTipoBusqueda.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Codigo SKU", "Referencia" }));
        comboBoxTipoBusqueda.setEnabled(false);
        comboBoxTipoBusqueda.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxTipoBusquedaItemStateChanged(evt);
            }
        });

        botonListarProductosInventariTienda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/productos.png"))); // NOI18N
        botonListarProductosInventariTienda.setText("Productos");
        botonListarProductosInventariTienda.setEnabled(false);
        botonListarProductosInventariTienda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListarProductosInventariTiendaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jLayeredPaneBuscarProductoLayout = new javax.swing.GroupLayout(jLayeredPaneBuscarProducto);
        jLayeredPaneBuscarProducto.setLayout(jLayeredPaneBuscarProductoLayout);
        jLayeredPaneBuscarProductoLayout.setHorizontalGroup(
            jLayeredPaneBuscarProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneBuscarProductoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jXLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxTipoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBusqueda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20)
                .addComponent(jXButtonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonListarProductosInventariTienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jLayeredPaneBuscarProductoLayout.setVerticalGroup(
            jLayeredPaneBuscarProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneBuscarProductoLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jLayeredPaneBuscarProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxTipoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(jLayeredPaneBuscarProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jXButtonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(botonListarProductosInventariTienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jLayeredPaneBuscarProducto.setLayer(jXLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneBuscarProducto.setLayer(txtBusqueda, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneBuscarProducto.setLayer(jXButtonBuscar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneBuscarProducto.setLayer(comboBoxTipoBusqueda, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneBuscarProducto.setLayer(botonListarProductosInventariTienda, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPaneDatosProductos.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del Producto"));

        txtDescripcion.setEditable(false);
        txtDescripcion.setEnabled(false);

        txtExistencia.setEnabled(false);

        jXLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/stock.png"))); // NOI18N
        jXLabel6.setText("Existencia");

        txtReferencia.setEditable(false);
        txtReferencia.setDisabledTextColor(new java.awt.Color(212, 208, 200));
        txtReferencia.setEnabled(false);

        txtCodigo.setEditable(false);
        txtCodigo.setEnabled(false);

        jXLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/etiquetas.png"))); // NOI18N
        jXLabel3.setText("CodigoSKU");

        jXLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/descripcion.png"))); // NOI18N
        jXLabel5.setText("Descripcion");

        labelReferencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/codigo1.png"))); // NOI18N
        labelReferencia.setText("Referencia");

        botonAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/agregar1.png"))); // NOI18N
        botonAgregar.setText("Agregar");
        botonAgregar.setEnabled(false);
        botonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarActionPerformed(evt);
            }
        });
        botonAgregar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                botonAgregarKeyReleased(evt);
            }
        });

        jXLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/marca4.png"))); // NOI18N
        jXLabel4.setText("Marca");

        txtMarca.setEditable(false);
        txtMarca.setEnabled(false);

        jXLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1416789267_clean.png"))); // NOI18N
        jXLabel8.setText("Cantidad");

        txtCantidad.setEnabled(false);
        txtCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCantidadActionPerformed(evt);
            }
        });
        txtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadKeyTyped(evt);
            }
        });

        jXLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1418352442_shipping.png"))); // NOI18N
        jXLabel9.setText("Bulto");

        txtNroBulto.setEnabled(false);
        txtNroBulto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNroBultoActionPerformed(evt);
            }
        });
        txtNroBulto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNroBultoKeyTyped(evt);
            }
        });

        botonLimpiarAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/limpiar.png"))); // NOI18N
        botonLimpiarAgregar.setText("Limpiar");
        botonLimpiarAgregar.setEnabled(false);
        botonLimpiarAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiarAgregarActionPerformed(evt);
            }
        });

        jXButtonUbicacbionProducto.setText("Ubicacion");
        jXButtonUbicacbionProducto.setEnabled(false);

        javax.swing.GroupLayout jLayeredPaneDatosProductosLayout = new javax.swing.GroupLayout(jLayeredPaneDatosProductos);
        jLayeredPaneDatosProductos.setLayout(jLayeredPaneDatosProductosLayout);
        jLayeredPaneDatosProductosLayout.setHorizontalGroup(
            jLayeredPaneDatosProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneDatosProductosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPaneDatosProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPaneDatosProductosLayout.createSequentialGroup()
                        .addComponent(jXLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jXLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNroBulto, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botonAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jXButtonUbicacbionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonLimpiarAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                        .addGap(13, 13, 13))
                    .addGroup(jLayeredPaneDatosProductosLayout.createSequentialGroup()
                        .addGroup(jLayeredPaneDatosProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(jLayeredPaneDatosProductosLayout.createSequentialGroup()
                                .addGroup(jLayeredPaneDatosProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(labelReferencia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jXLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jLayeredPaneDatosProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jLayeredPaneDatosProductosLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jXLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDescripcion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jLayeredPaneDatosProductosLayout.createSequentialGroup()
                                        .addComponent(txtReferencia, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jXLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jXLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(txtExistencia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addContainerGap())))
        );
        jLayeredPaneDatosProductosLayout.setVerticalGroup(
            jLayeredPaneDatosProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneDatosProductosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPaneDatosProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jXLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLayeredPaneDatosProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jXLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addGroup(jLayeredPaneDatosProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPaneDatosProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtReferencia, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtExistencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labelReferencia, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLayeredPaneDatosProductosLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jLayeredPaneDatosProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jXLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jXLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(jLayeredPaneDatosProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPaneDatosProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jXLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jXLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtNroBulto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPaneDatosProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonLimpiarAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jXButtonUbicacbionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jLayeredPaneDatosProductos.setLayer(txtDescripcion, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(txtExistencia, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(jXLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(txtReferencia, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(txtCodigo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(jXLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(jXLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(labelReferencia, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(botonAgregar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(jXLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(txtMarca, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(jSeparator1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(jXLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(txtCantidad, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(jXLabel9, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(txtNroBulto, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(botonLimpiarAgregar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneDatosProductos.setLayer(jXButtonUbicacbionProducto, javax.swing.JLayeredPane.DEFAULT_LAYER);

        TablaDetalleRegistrosAsignacionMercancia1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablaDetalleRegistrosAsignacionMercancia1.setToolTipText("Para Eliminar Precione La tecla \"Supr\"");
        TablaDetalleRegistrosAsignacionMercancia1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TablaDetalleRegistrosAsignacionMercancia1KeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(TablaDetalleRegistrosAsignacionMercancia1);

        jXButtonTotalizar.setText("Totalizar");
        jXButtonTotalizar.setEnabled(false);
        jXButtonTotalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXButtonTotalizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jLayeredPaneProductosLayout = new javax.swing.GroupLayout(jLayeredPaneProductos);
        jLayeredPaneProductos.setLayout(jLayeredPaneProductosLayout);
        jLayeredPaneProductosLayout.setHorizontalGroup(
            jLayeredPaneProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneProductosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPaneProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLayeredPaneDatosProductos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                    .addComponent(jScrollPane5)
                    .addComponent(jLayeredPaneBuscarProducto, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPaneProductosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jXButtonTotalizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jLayeredPaneProductosLayout.setVerticalGroup(
            jLayeredPaneProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneProductosLayout.createSequentialGroup()
                .addComponent(jLayeredPaneBuscarProducto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPaneDatosProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXButtonTotalizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jLayeredPaneProductos.setLayer(jLayeredPaneBuscarProducto, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneProductos.setLayer(jLayeredPaneDatosProductos, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneProductos.setLayer(jScrollPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneProductos.setLayer(jXButtonTotalizar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane4.setViewportView(jLayeredPaneProductos);

        jXButtonAsignarMercancia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/database_save.png"))); // NOI18N
        jXButtonAsignarMercancia.setText("ASIGNAR");
        jXButtonAsignarMercancia.setEnabled(false);
        jXButtonAsignarMercancia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXButtonAsignarMercanciaActionPerformed(evt);
            }
        });

        jXButtonImprimir_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/1418331399_Print.png"))); // NOI18N
        jXButtonImprimir_.setText("IMPRIMIR");
        jXButtonImprimir_.setEnabled(false);
        jXButtonImprimir_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXButtonImprimir_ActionPerformed(evt);
            }
        });

        busy.setText("Cargando...!!!");

        busy1.setText("Asignando...!!!");

        jXButtonReiniciarFooter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_almacen/reiniciar.png"))); // NOI18N
        jXButtonReiniciarFooter.setText("Reiniciar");
        jXButtonReiniciarFooter.setEnabled(false);
        jXButtonReiniciarFooter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXButtonReiniciarFooterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jLayeredPanePrincipalLayout = new javax.swing.GroupLayout(jLayeredPanePrincipal);
        jLayeredPanePrincipal.setLayout(jLayeredPanePrincipalLayout);
        jLayeredPanePrincipalLayout.setHorizontalGroup(
            jLayeredPanePrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jXTaskPaneCabeceraAsignacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane4)
            .addGroup(jLayeredPanePrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPanePrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPanePrincipalLayout.createSequentialGroup()
                        .addComponent(jXButtonReiniciarFooter, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(busy1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jXButtonImprimir_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jXButtonAsignarMercancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLayeredPanePrincipalLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(busy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jLayeredPanePrincipalLayout.setVerticalGroup(
            jLayeredPanePrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPanePrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jXTaskPaneCabeceraAsignacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(busy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addGroup(jLayeredPanePrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXButtonAsignarMercancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXButtonImprimir_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(busy1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXButtonReiniciarFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1))
        );
        jLayeredPanePrincipal.setLayer(jXTaskPaneCabeceraAsignacion, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPanePrincipal.setLayer(jScrollPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPanePrincipal.setLayer(jXButtonAsignarMercancia, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPanePrincipal.setLayer(jXButtonImprimir_, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPanePrincipal.setLayer(busy, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPanePrincipal.setLayer(busy1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPanePrincipal.setLayer(jXButtonReiniciarFooter, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane2.setViewportView(jLayeredPanePrincipal);

        add(jScrollPane2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jXButtonConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXButtonConfirmarActionPerformed

        Thread hilo = new Thread() {

            @Override
            public void run() {
                busy.setEnabled(true);
                busy.setVisible(true);
                busy.setBusy(true);
                try {
                    posUs = comboBoxUsuarios.getSelectedIndex();
                    posTi2 = comboBoxAlmacenDesde.getSelectedIndex();
                    posTi = comboBoxTiendaHasta.getSelectedIndex();

                    if (posTi2 == posTi) {
                        busy.setEnabled(false);
                        busy.setVisible(false);
                        busy.setBusy(false);
                        //Controles ComboBox
                        comboBoxAlmacenDesde.setEnabled(true);
                        comboBoxTiendaHasta.setEnabled(true);
                        comboBoxUsuarios.setEnabled(true);

                        JOptionPane.showMessageDialog(null, "Por Favor, Selecione el Origen ó Destino Diferente.");
                        return;
                    }
                    if (posUs != -1 && posTi2 != -1 && posTi != -1) {
                        ususrioActual = (Usuario) resultListUsuarios.get(posUs);
                        almacenDesde = (Almacen) resultListAlmacen.get(posTi2);
                        tiendaHasta = (Almacen) resultListAlmacen.get(posTi);
                        //COnstruir Consulta
                        String sql_inv_almacen = "SELECT i FROM InventarioTienda i WHERE i.cantidad > 0 and i.inventarioTiendaPK.idAlmacen =" + almacenDesde.getIdAlmacen();
                        resultListInventarioTienda = ObjectModelDAO.getResultQuery(sql_inv_almacen);

                        //Controles ComboBox 
                        comboBoxUsuarios.setEnabled(false);
                        comboBoxTiendaHasta.setEnabled(false);
                        comboBoxAlmacenDesde.setEnabled(false);
                        //Controles de Panel 2 
                        comboBoxTipoBusqueda.setEnabled(true);
                        txtBusqueda.requestFocus();
                        txtBusqueda.setEnabled(true);
                        jXButtonBuscar.setEnabled(true);
                        botonListarProductosInventariTienda.setEnabled(true);
                        jXButtonConfirmar.setEnabled(false);
                        jXButtonReiniciar.setEnabled(true);

                        jXTaskPaneCabeceraAsignacion.setCollapsed(true);
                    } else {
                        JOptionPane.showMessageDialog(null, "Por Favor, Selecione Todos Los Datos Correctamente.");
                    }
                    busy.setEnabled(false);
                    busy.setVisible(false);
                    busy.setBusy(false);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Excepcion AL Confirmar Factura : " + e);
                    System.err.println("ERROR en EVENTO BOTON CONFIRMAR FACTURA : " + e);
                    Logger.getLogger(Asignar1.class.getName()).log(Level.SEVERE, null, e);
                }
            }
        };
        hilo.start();


    }//GEN-LAST:event_jXButtonConfirmarActionPerformed


    private void botonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarActionPerformed

        try {
            if ("".equals(this.txtCantidad.getText()) || "".equals(this.txtNroBulto.getText())) {
                JOptionPane.showMessageDialog(null, "¡¡¡Intriduzca Cantidad  de Productos Contabilizados "
                        + "y Numero deBulto Asignado Por Favor!!!");

            } else {
                if (Integer.parseInt(this.txtCantidad.getText()) == 0) {
                    JOptionPane.showMessageDialog(null, "¡¡¡La Cantidad No Puede Ser Cero (0)");
                }
                if (inv == null) {//No existe el Producto
                    JOptionPane.showMessageDialog(null, "No existe el Producto");
                }
                if (inv.getCantidad() < (Math.abs(Integer.parseInt(this.txtCantidad.getText())))) {
                    JOptionPane.showMessageDialog(null, "¡¡¡La Cantida Supera la Existencia en Inventario!!!");
                }

                if (Integer.parseInt(this.txtNroBulto.getText()) > 0
                        && inv.getCantidad() >= (Math.abs(Integer.parseInt(this.txtCantidad.getText())))) {

                    deReg = new DetalleRegistro();
                    deReg.setInv(inv);

                    deReg.setCantidad(Integer.parseInt(this.txtCantidad.getText()));
                    deReg.setBulto(Integer.parseInt(this.txtNroBulto.getText()));
                    deReg.setRenglon(renglon++);
                    if (listaDetalle == null || listaDetalle.isEmpty()) {
                        listaDetalle = new ArrayList<>();
                    }
                    listaDetalle.add(deReg);
                    modeloTablaAsignacion.setListaDetalleResgistro(listaDetalle);
                    modeloTablaAsignacion.fireTableDataChanged();

                    this.txtCodigo.setText("");
                    this.txtDescripcion.setText("");
                    this.txtCantidad.setText("");
                    this.txtNroBulto.setText("");
                    this.txtReferencia.setText("");
                    this.txtMarca.setText("");
                    this.txtExistencia.setText("");
                    txtBusqueda.requestFocus();
                    //Remover de Lista Actual Producto Agregago
                    this.invAux = inv;
                    this.resultListInventarioTienda.remove(inv);

                }
            }

        } catch (HeadlessException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "ERROR Agregando Producto a la Tabla y Lista : " + ex);
            Logger.getLogger(Asignar1.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_botonAgregarActionPerformed

    private void jXButtonAsignarMercanciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXButtonAsignarMercanciaActionPerformed

        Thread hilo = new Thread() {

            @Override
            public void run() {
                jXButtonTotalizar.setEnabled(false);
                jXButtonAsignarMercancia.setEnabled(false);
                busy1.setVisible(true);
                busy1.setBusy(true);

                try {

                    Float totalCosto = 0f;

                    //SalidaParaTienda cab = new SalidaParaTienda(ObjectModelDAO.getObject(al.getIdAlmacen(), Almacen.class), user, ayudante);
                    SalidaParaTienda cab = new SalidaParaTienda(almacenDesde, tiendaHasta, user, ususrioActual);
                    Integer id_creado_cabecera = (Integer) ObjectModelDAO.saveObject(cab);
                    if (id_creado_cabecera != -1) {//se creo

                        for (DetalleRegistro dr : listaDetalle) {

                            //String sql = "SELECT renglon FROM InventarioTienda renglon WHERE renglon.inventarioTiendaPK.idAlmacen =" + tiendaHasta.getIdAlmacen();
                            //List resultListInventarioHasta = ObjectModelDAO.getResultQuery(sql);
                            //InventarioTienda ivtHasta = resultListInventarioHasta.get(0)
                            System.out.println("Datos Lista : " + dr.toString());

                            SalidaParaTiendaDetallePK detallePK = new SalidaParaTiendaDetallePK(
                                    dr.inv.getProducto().getIdProducto(),
                                    id_creado_cabecera);

                            SalidaParaTiendaDetalle detalle = new SalidaParaTiendaDetalle(
                                    detallePK,
                                    dr.getCantidad(),
                                    dr.getBulto(),
                                    dr.getRenglon(),
                                    dr.inv.getProducto(),
                                    cab);

                            Object id_creado_detalle = ObjectModelDAO.saveObject(detalle);
                            if (id_creado_detalle instanceof SalidaParaTiendaDetallePK
                                    && ((SalidaParaTiendaDetallePK) id_creado_detalle) == null) {
                                System.err.println("ERROR AL CREAR REGISTRO DETALLES "
                                        + ((SalidaParaTiendaDetallePK) id_creado_detalle).toString());
                            } else {//se creo
                                //Actualizar Descuesto de Inventario                            
                                System.err.println("Creando PK inventario");
                                InventarioTiendaPK inventarioPK = new InventarioTiendaPK(//Guaradar InventarioPK
                                        dr.inv.getProducto().getIdProducto(),
                                        almacenDesde.getIdAlmacen()
                                );
                                //Guaradar Inventario del Almacen DESDE
                                InventarioTienda id_in = ObjectModelDAO.getObject(inventarioPK, InventarioTienda.class);
                                System.err.println("ObjectModelDAO.getObject(inventarioPK, InventarioTienda.class) es: " + id_in);
                                if (id_in == null) {
                                    Integer id = inventarioPK.getIdProducto();
                                    String ref = dr.inv.getProducto().getReferenciaProducto();
                                    String des = dr.inv.getProducto().getDescripcion();
                                    JOptionPane.showMessageDialog(null, "El Producto con el Codigo: " + id + "\n"
                                            + "Rerefencia: " + ref + "\n"
                                            + "Drecipción: " + des + "\n"
                                            + "no Existe en La Tienda: " + almacenDesde.getNombre() + "\n"
                                            + "Acontinuación Se Creará automticamente." + "\n");
                                } else {
                                    // id_in.setPrecio(dr.ep.getIdProducto().getPrecioOriginal());
                                    //id_in.setDescuento(0f);
                                    //**************************Descuenta de Mercancia en el Alamacen DESDE donde se Envia
                                    id_in.setCantidad(id_in.getCantidad() - dr.getCantidad());

                                    ObjectModelDAO.updateObject(id_in);
                                    System.err.println("Actualizando Inventario de Producto Existente");

                                    //**************************************************************************
                                    //Actualizar Obtener Precio en Los Productos del almacen Hasta donde se envia                            
                                    System.err.println("Creando PK inventario");
                                    InventarioTiendaPK inventarioPK2 = new InventarioTiendaPK(//Guaradar InventarioPK
                                            //Guaradar InventarioPK
                                            dr.inv.getProducto().getIdProducto(),
                                            tiendaHasta.getIdAlmacen()
                                    );
                                    //Guaradar Inventario del almacen HASTA donde se envia
                                    InventarioTienda id_in2 = ObjectModelDAO.getObject(inventarioPK2, InventarioTienda.class);
                                    System.err.println("ObjectModelDAO.getObject(inventarioPK, InventarioTienda.class) es: " + id_in);
                                    if (id_in2 == null) {
                                        Integer id = dr.inv.getProducto().getIdProducto();
                                        String ref = dr.inv.getProducto().getReferenciaProducto();
                                        String des = dr.inv.getProducto().getDescripcion();
                                        JOptionPane.showMessageDialog(null, "El Producto con el Codigo: " + id + ".\n"
                                                + "Referencia: " + ref + ".\n"
                                                + "Descripcion: " + des + ".\n"
                                                + "No Existe," + "\n"
                                                + "En La Tienda:" + tiendaHasta.getNombre() + ".\n"
                                                + "Acontinuación Se Creará automticamente." + "\n");

                                        id_in2 = new InventarioTienda(
                                                inventarioPK2,
                                                //dr.getCantidad(),
                                                0,
                                                tiendaHasta,
                                                dr.inv.getProducto()
                                        );

                                        id_in2.setPrecioConDescuento(id_in.getPrecioConDescuento());
                                        id_in2.setPrecioSinDescuento(id_in.getPrecioSinDescuento());
                                        id_in2.setDescuento(0);
                                        id_in2.setProcesado(dr.getCantidad());

                                        //*************AUMENTO de Mercancia en el Alamacen HASTA donde se Envia
                                        id_in2.setAsignado(Boolean.FALSE);
                                        ObjectModelDAO.saveObject(id_in2);
                                        //crear if varificando si el inventario2 se creo    
                                    }

                                    totalCosto += id_in2.getPrecioConDescuento();
                                    System.err.println("EXITO CREANDO REGISTRO LISTA DETALLES:");
                                    // JOptionPane.showMessageDialog(null, "¡¡¡REGISTRO GUARDADO CON EXITO!!!");

                                }
                            }
                        }
                    }

                    cab.setTotal(totalCosto);
                    //cab.setRevisado(false);
                    ObjectModelDAO.updateObject(cab);
                    //  jXTable1.clearSelection();

                    int respuesta = JOptionPane.showConfirmDialog(null, "El Registro se Guardo Exitosamente...!!! \n ¿Desea Generar el Reporte de la Mercancia Asignada?",
                            "COMPROBACION DE ASIGNACION", JOptionPane.YES_NO_OPTION);

                    if (respuesta == JOptionPane.YES_OPTION) {
                        generarReporteAsignacionProcesada(); 
                    }
                    if (respuesta == JOptionPane.NO_OPTION) {
                        
                        reiniciar();
                    }
                    
                    
                    busy1.setEnabled(false);
                    busy1.setVisible(false);
                    busy1.setBusy(false);

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "ERROR Asignando Mercancia :" + e);
                    System.err.println("ERROR Asignando Mercancia :" + e);
                    Logger.getLogger(Asignar1.class.getName()).log(Level.SEVERE, null, e);
                }

            }

            private void reiniciar() {
                listaDetalle.clear();
                        listaDetalle = null;
                        TablaDetalleRegistrosAsignacionMercancia1.removeAll();
                        modeloTablaAsignacion.fireTableDataChanged();
                        jXButtonConfirmar.setEnabled(true);
                        //Controles ComboBox
                        comboBoxAlmacenDesde.setEnabled(true);
                        comboBoxTiendaHasta.setEnabled(true);
                        comboBoxUsuarios.setEnabled(true);
                        //BOnton
                        jXButtonConfirmar.setEnabled(true);
                        //OBjetos
                        ususrioActual = null;
                        almacenDesde = null;
                        tiendaHasta = null;
                        //Controles ComboBox
                        comboBoxAlmacenDesde.setSelectedIndex(-1);
                        comboBoxTiendaHasta.setSelectedIndex(-1);
                        comboBoxUsuarios.setSelectedIndex(-1);
                        //COntroles Panel desabilitar 
                        comboBoxTipoBusqueda.setEnabled(false);
                        txtBusqueda.setEnabled(false);
                        jXButtonBuscar.setEnabled(false);
                        botonListarProductosInventariTienda.setEnabled(false);
                        //Controles internos de este boton o metodo
                        botonLimpiarAgregar.setEnabled(false);
                        botonAgregar.setEnabled(false);
                        jXButtonAsignarMercancia.setEnabled(false);
                        jXTaskPaneCabeceraAsignacion.setCollapsed(false);
                        jXButtonImprimir_.setEnabled(false);
                        jXButtonReiniciarFooter.setEnabled(false);
                        jXButtonReiniciar.setEnabled(false);
                        busy1.setEnabled(false);
                        busy1.setVisible(false);
                        busy1.setBusy(false);
            }

            private void generarReporteAsignacionProcesada() {
                         

                busy.setEnabled(true);
                busy.setVisible(true);
                busy.setBusy(true);
                try {
                    JasperPrint jasperPrint = null;

                    Map<String, Object> parametro = new HashMap<>();
                    String s = "";
                    TableModelReport dataSourse = new TableModelReport(TablaDetalleRegistrosAsignacionMercancia1.getModel());
                    parametro.put("origen", almacenDesde.getNombre());
                    parametro.put("destino", tiendaHasta.getNombre());                    
                    parametro.put("REPORT_DATA_SOURSE", dataSourse);
                    //JasperCompileManager.compileReport(rutaJrxml);
                    JasperReport reporte = (JasperReport) JRLoader.loadObject(this.getClass().getResourceAsStream("/reportes/ListadoProductosAsignadosFinalizado.jasper"));

                    jasperPrint = JasperFillManager.fillReport(reporte, parametro, dataSourse);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);
                    jasperViewer.setModalExclusionType(ModalExclusionType.TOOLKIT_EXCLUDE);
                    jasperViewer.setTitle("Reporte de Asignacion de Mercancia.");
                    jasperViewer.setVisible(true);
                    //Guardar Reporte 
//                    JRPdfExporter exporter=new JRPdfExporter();
//                    exporter.setParameter(JRExporterParameter.JASPER_PRINT,reporte);
//                    exporter.exportReport();
//  
                    
                    busy.setEnabled(false);
                    busy.setVisible(false);
                    busy.setBusy(false);
                    int respuesta = JOptionPane.showConfirmDialog(null, "El Archivo fue Generado con Exito,"
                            + "¿Desea Realizar Una Nueva Asignacion?");

                    if (respuesta == JOptionPane.YES_OPTION) { 
                        requestFocus();
                        reiniciar();
                    }
                    if (respuesta == JOptionPane.NO_OPTION) {
                       // 
                    } 

                } catch (JRException | HeadlessException e) {
                    JOptionPane.showMessageDialog(null, "Se a Dectectado Un Proble Con Proceso de Seleccion de Facturas,"
                            + "Por Favor Vuelva a Intentarlo.");
                    Logger.getLogger(Distribuidora1.class.getName()).log(Level.SEVERE, null, e);
                    System.err.println("Seleccionando Facturas" + e);

                }

             
            }
        };
        hilo.start();


    }//GEN-LAST:event_jXButtonAsignarMercanciaActionPerformed

    private void txtCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCantidadActionPerformed

        try {
            if ("".equals(this.txtCantidad.getText())) {
                JOptionPane.showMessageDialog(null, "¡¡¡Intriduzca Cantidad  de Productos Contabilizados "
                        + "y Numero deBulto Asignado Por Favor!!!");

            } else {
                if ((Integer.parseInt(this.txtCantidad.getText())) == 0
                        || inv.getCantidad() < (Math.abs(Integer.parseInt(this.txtCantidad.getText())))) {
                    JOptionPane.showMessageDialog(null, "Imposible Asignar Mercancia (NO Hay Sufiente) \n La Cantida SUjeridad es : " + inv.getCantidad());
                    this.txtCantidad.setText("");
                    this.txtCantidad.requestFocus();
                } else {

                    //this.txtNroBulto.setEnabled(true);
                    this.txtNroBulto.requestFocus();
                }
            }
        } catch (NumberFormatException | HeadlessException e) {
            System.err.println("ERROR Siguiente : \n Imposible Asignar Mercancia (NO Hay Sufiente)  :" + e);
            Logger.getLogger(Asignar1.class.getName()).log(Level.SEVERE, null, e);
        }

    }//GEN-LAST:event_txtCantidadActionPerformed

    private void jXButtonReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXButtonReiniciarActionPerformed

        try {
            int respuesta = JOptionPane.showConfirmDialog(null, "¿Seguro Desea Cancelar?", "Confirmacion", JOptionPane.YES_NO_OPTION);

            if (respuesta == JOptionPane.YES_OPTION) {
                cargarComboBoxAlmacen();
                // this.jXButtonConfirmar.setEnabled(true);
                //Limpiar Lista y Tabla
                listaDetalle.clear();
                listaDetalle = null;
                TablaDetalleRegistrosAsignacionMercancia1.removeAll();
                modeloTablaAsignacion.fireTableDataChanged();

                //Controles ComboBox
                this.comboBoxAlmacenDesde.setEnabled(true);
                this.comboBoxTiendaHasta.setEnabled(true);
                this.comboBoxUsuarios.setEnabled(true);

                //BOntones de Pedido
                this.jXButtonConfirmar.setEnabled(true);
                //OBjetos
                this.ususrioActual = null;
                this.almacenDesde = null;
                this.tiendaHasta = null;

                //Controles ComboBox
                this.comboBoxAlmacenDesde.setSelectedIndex(-1);
                this.comboBoxTiendaHasta.setSelectedIndex(-1);
                this.comboBoxUsuarios.setSelectedIndex(-1);

                //COntroles Panel Busqueda desabilitar
                this.comboBoxTipoBusqueda.setEnabled(false);
                this.txtBusqueda.setEnabled(false);
                this.jXButtonBuscar.setEnabled(false);
                this.botonListarProductosInventariTienda.setEnabled(false);

                //Limpiar Campos de Texto
                this.txtCodigo.setText("");
                this.txtCodigo.setEnabled(false);
                this.txtDescripcion.setText("");
                this.txtDescripcion.setEnabled(false);
                this.txtReferencia.setText("");
                this.txtReferencia.setEnabled(false);
                this.txtMarca.setText("");
                this.txtMarca.setEnabled(false);
                this.txtExistencia.setText("");
                this.txtExistencia.setEnabled(false);
                this.txtCantidad.setText("");
                this.txtCantidad.setEnabled(false);
                this.txtNroBulto.setText("");
                this.txtNroBulto.setEnabled(false);

                //Botones de Datos del Producto
                // this.botonValidar.setEnabled(false);
                this.botonAgregar.setEnabled(false);
                this.botonLimpiarAgregar.setEnabled(false);
                this.jXButtonTotalizar.setEnabled(false);
                this.jXButtonImprimir_.setEnabled(false);
                this.jXButtonAsignarMercancia.setEnabled(false);
                this.jXButtonReiniciarFooter.setEnabled(false);
                this.jXButtonReiniciar.setEnabled(false);

            }
        } catch (Exception e) {
            Logger.getLogger(Asignar1.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "Por Favor, Seleccione Un Pedido Valido Para Continuar.!!!");
            System.err.println("ERROR ó Excepcion Boton Reiniciar Todo Desde Pedido : " + e);
        }


    }//GEN-LAST:event_jXButtonReiniciarActionPerformed

    private void txtNroBultoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNroBultoActionPerformed

        botonAgregarActionPerformed(null);


    }//GEN-LAST:event_txtNroBultoActionPerformed

    private void botonLimpiarAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiarAgregarActionPerformed

        int respuesta = JOptionPane.showConfirmDialog(null, "¿Seguro Desea Cancelar?", "Confirmacion", JOptionPane.YES_NO_OPTION);

        if (respuesta == JOptionPane.YES_OPTION) {
            //Limpiar Campos de Texto
            this.txtCodigo.setText("");
            this.txtDescripcion.setText("");
            this.txtReferencia.setText("");
            this.txtMarca.setText("");
            this.txtExistencia.setText("");
            this.txtCantidad.setText("");
            this.txtNroBulto.setText("");

        }

    }//GEN-LAST:event_botonLimpiarAgregarActionPerformed

    private void txtCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyTyped

        char car = evt.getKeyChar();
        String cadena = " ,-_{}[¨*+´!°#$%&/()=?¡.;;><qwertyuiopñlkjhgfdsazxcvbnm,.-ç´+`¡'<º"
                + "¨_:´:_.-*^+`QWERTYUIOPÑLKJHGFDSAZXCVBNM,.-´ç+`¡'º<>ª!^·$%&/()=?¿*"; // Caracterens no validos
        char s = '"';
        for (int i = 0; i < cadena.length(); i++) {
            if (car == cadena.charAt(i) || car == s) {
                evt.consume();
            }
        }

    }//GEN-LAST:event_txtCantidadKeyTyped

    private void jXButtonImprimir_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXButtonImprimir_ActionPerformed

        if (listaDetalle.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Imposible Imprimir Sin Datos en la Tabla");
        } else {
            // TODO add your handling code here:    resultList
            Thread hilo = new Thread() {

                @Override
                public void run() {

                    busy.setEnabled(true);
                    busy.setVisible(true);
                    busy.setBusy(true);
                    try {
                        JasperPrint jasperPrint = null;

                        Map<String, Object> parametro = new HashMap<>();
                        String s = "";
                        TableModelReport dataSourse = new TableModelReport(TablaDetalleRegistrosAsignacionMercancia1.getModel());
                        parametro.put("origen", almacenDesde.getNombre());
                        parametro.put("destino", tiendaHasta.getNombre());
                        parametro.put("REPORT_DATA_SOURSE", dataSourse);
                        //JasperCompileManager.compileReport(rutaJrxml);
                        JasperReport reporte = (JasperReport) JRLoader.loadObject(this.getClass().getResourceAsStream("/reportes/ListadoProductosAsignadosFinalizado.jasper"));

                        jasperPrint = JasperFillManager.fillReport(reporte, parametro, dataSourse);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);
                        jasperViewer.setTitle("Reporte de Asignacion de Mercancia.");
                        jasperViewer.setVisible(true);
                        //Guardar Reporte 
//                    JRPdfExporter exporter=new JRPdfExporter();
//                    exporter.setParameter(JRExporterParameter.JASPER_PRINT,reporte);
//                    exporter.exportReport();
                        //busy
                        busy.setEnabled(false);
                        busy.setVisible(false);
                        busy.setBusy(false);
                    } catch (JRException | HeadlessException e) {
                        JOptionPane.showMessageDialog(null, "Se a Dectectado Un Proble Con Proceso de Seleccion de Facturas,"
                                + "Por Favor Vuelva a Intentarlo.");
                        Logger.getLogger(Distribuidora1.class.getName()).log(Level.SEVERE, null, e);
                        System.err.println("Seleccionando Facturas" + e);
                        //busy
                        busy.setEnabled(false);
                        busy.setVisible(false);
                        busy.setBusy(false);

                    }

                }
            };
            hilo.start();
        }

    }//GEN-LAST:event_jXButtonImprimir_ActionPerformed

    private void jXButtonReiniciarFooterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXButtonReiniciarFooterActionPerformed

        try {
            int respuesta = JOptionPane.showConfirmDialog(null, "¿Seguro Desea Cancelar?", "Confirmacion", JOptionPane.YES_NO_OPTION);

            if (respuesta == JOptionPane.YES_OPTION) {

                //Limpiar Lista y Tabla
                listaDetalle.clear();
                listaDetalle = null;
                TablaDetalleRegistrosAsignacionMercancia1.removeAll();
                modeloTablaAsignacion.fireTableDataChanged();
                //Controles ComboBox
                comboBoxAlmacenDesde.setEnabled(true);
                comboBoxTiendaHasta.setEnabled(true);
                comboBoxUsuarios.setEnabled(true);

                //BOntones de Pedido
                jXButtonConfirmar.setEnabled(true);
                //OBjetos
                ususrioActual = null;
                almacenDesde = null;
                tiendaHasta = null;

                //Controles ComboBox
                comboBoxAlmacenDesde.setSelectedIndex(-1);
                comboBoxTiendaHasta.setSelectedIndex(-1);
                comboBoxUsuarios.setSelectedIndex(-1);

                //COntroles Panel Busqueda desabilitar
                comboBoxTipoBusqueda.setEnabled(false);
                txtBusqueda.setEnabled(false);
                jXButtonBuscar.setEnabled(false);
                botonListarProductosInventariTienda.setEnabled(false);

                //Limpiar Campos de Texto
                txtCodigo.setText("");
                txtCodigo.setEnabled(false);
                txtDescripcion.setText("");
                txtDescripcion.setEnabled(false);
                txtReferencia.setText("");
                txtReferencia.setEnabled(false);
                txtMarca.setText("");
                txtMarca.setEnabled(false);
                txtExistencia.setText("");
                txtExistencia.setEnabled(false);
                txtCantidad.setText("");
                txtCantidad.setEnabled(false);
                txtNroBulto.setText("");
                txtNroBulto.setEnabled(false);

                //Botones de Datos del Producto 
                botonAgregar.setEnabled(false);
                botonLimpiarAgregar.setEnabled(false);
                //foot Panel
                jXButtonAsignarMercancia.setEnabled(false);
                jXButtonImprimir_.setEnabled(false);
                jXButtonTotalizar.setEnabled(false);
                jXButtonUbicacbionProducto.setEnabled(false);
                jXTaskPaneCabeceraAsignacion.setCollapsed(false);
                jXButtonReiniciarFooter.setEnabled(false);
               jXButtonReiniciar.setEnabled(false);

            }
        } catch (Exception e) {
            Logger.getLogger(Asignar1.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "ERROR ó Excepcion Boton Reiniciar Todo Desde Pedido : " + e);
            System.err.println("ERROR ó Excepcion Boton Reiniciar Todo Desde Pedido : " + e);
        }


    }//GEN-LAST:event_jXButtonReiniciarFooterActionPerformed

    private void TablaDetalleRegistrosAsignacionMercancia1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablaDetalleRegistrosAsignacionMercancia1KeyReleased

        try {

            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
                if (JOptionPane.showConfirmDialog(this, "Desea eliminar el registro?",
                        "Eliminar registro", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    //se elimina
                    int i;
                    int[] selection = TablaDetalleRegistrosAsignacionMercancia1.getSelectedRows();
                    for (i = 0; i < selection.length; i++) {
                        selection[i] = TablaDetalleRegistrosAsignacionMercancia1.convertRowIndexToModel(selection[i]);
                    }
                    this.resultListInventarioTienda.add(this.invAux);//
                    this.listaDetalle.remove(selection[i - 1]);
                    modeloTablaAsignacion.fireTableRowsDeleted(selection[0], selection[selection.length - 1]);

                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Excepcion al Eliminar registro de La Tabla" + e.getMessage());
            Logger.getLogger(Tiendas1.class.getName()).log(Level.SEVERE, null, e);

        }


    }//GEN-LAST:event_TablaDetalleRegistrosAsignacionMercancia1KeyReleased

    private void botonAgregarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_botonAgregarKeyReleased
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                botonAgregarActionPerformed(null);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Excepcion al Eliminar registro de La Tabla" + e.getMessage());
            Logger.getLogger(Tiendas1.class.getName()).log(Level.SEVERE, null, e);

        }
    }//GEN-LAST:event_botonAgregarKeyReleased

    private void txtNroBultoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroBultoKeyTyped
        char car = evt.getKeyChar();
        String cadena = " ,-_{}[¨*+´!°#$%&/()=?¡.;;><qwertyuiopñlkjhgfdsazxcvbnm,.-ç´+`¡'<º"
                + "¨_:´:_.-*^+`QWERTYUIOPÑLKJHGFDSAZXCVBNM,.-´ç+`¡'º<>ª!^·$%&/()=?¿*"; // Caracterens no validos
        char s = '"';
        for (int i = 0; i < cadena.length(); i++) {
            if (car == cadena.charAt(i) || car == s) {
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtNroBultoKeyTyped

    private void jXButtonTotalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXButtonTotalizarActionPerformed
        try {
            if (TablaDetalleRegistrosAsignacionMercancia1.getRowCount() != 0) {
                this.jXButtonAsignarMercancia.setEnabled(true);
                this.jXButtonImprimir_.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(null, "DEBE Finalizar de Contabilizar TODOS Los Productos"
                        + "De Mercancia Asignada Para la Tienda");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Excepcion al Totalizar Pedido" + e);
            Logger.getLogger(Tiendas1.class.getName()).log(Level.SEVERE, null, e);

        }

    }//GEN-LAST:event_jXButtonTotalizarActionPerformed

    private void txtBusquedaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyTyped

        int pos = this.comboBoxTipoBusqueda.getSelectedIndex();
        switch (pos) {
            case 0:
                char car = evt.getKeyChar();
                String cadena = "_{}[¨*´!°#$%&/()=?;;><qwertyuiopñlkjhgfdsazxcvbnm´`¡'<º"
                        + "¨_:´:_*^`QWERTYUIOPÑLKJHGFDSAZXCVBNM´ç`¡'º<>ª!^·$%&/()=?¿*"; // Caracterens no validos
                char s = '"';
                for (int i = 0; i < cadena.length(); i++) {
                    if (car == cadena.charAt(i) || car == s) {
                        JOptionPane.showMessageDialog(null, "Por Favor, Introduzca Valores Numerico Para Este Tipo de Busqueda|n"
                                + "ó Seleccione El Tipo de Busqueda Correcta.");
                        evt.consume();
                    }
                }
            //  break;

        }
    }//GEN-LAST:event_txtBusquedaKeyTyped

    private void jXButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXButtonBuscarActionPerformed
        boolean encontrado = true;

        try {
            if ("".equals(this.txtBusqueda.getText())) {
                JOptionPane.showMessageDialog(null, "¡¡¡Intriduzca Atributo de Busqueda Por Favor!!!");
            } else {
                int pos = this.comboBoxTipoBusqueda.getSelectedIndex();
                List<InventarioTienda> listaProductos = this.resultListInventarioTienda;
                switch (pos) {
                    case 0:

                        int codigoSKU = Integer.parseInt(this.txtBusqueda.getText());

                        for (InventarioTienda lista : listaProductos) {

                            if (lista.getProducto().getIdProducto().equals(codigoSKU)) {
                                //JOptionPane.showConfirmDialog(this, " EL CODIGO SKU ES CORRECTO");
                                inv = lista;
                                //this.jLayeredPaneDatosProductos.setEnabled(true);
                                this.txtCodigo.setText(lista.getProducto().getIdProducto().toString());
                                this.txtCodigo.setEnabled(true);
                                this.txtReferencia.setText(lista.getProducto().getReferenciaProducto());
                                this.txtReferencia.setEnabled(true);
                                this.txtDescripcion.setText(lista.getProducto().getDescripcion());
                                this.txtDescripcion.setEnabled(true);
                                this.txtMarca.setText(lista.getProducto().getIdMarca().getNombre());
                                this.txtMarca.setEnabled(true);
                                this.txtExistencia.setText(lista.getCantidad().toString());
                                this.txtCantidad.setEnabled(true);
                                this.txtNroBulto.setEnabled(true);
                                //this.botonAgregar.setEnabled(true);
                                this.botonLimpiarAgregar.setEnabled(true);

                            } else {
                                encontrado = false;
                            }
                        }

                        break;
                    case 1:
                        String referencia = this.txtBusqueda.getText();
                        for (InventarioTienda lista : listaProductos) {

                            if (lista.getProducto().getReferenciaProducto().equalsIgnoreCase(referencia)) {
                                //JOptionPane.showConfirmDialog(this, " LA REFERENCIA ES CORRECTA");
                                inv = lista;
                                // this.jLayeredPaneDatosProductos.setEnabled(true);
                                this.txtCodigo.setText(lista.getProducto().getIdProducto().toString());
                                this.txtReferencia.setText(lista.getProducto().getReferenciaProducto());
                                this.txtDescripcion.setText(lista.getProducto().getDescripcion());
                                this.txtMarca.setText(lista.getProducto().getIdMarca().getNombre());
                                this.txtExistencia.setText(lista.getCantidad().toString());
                                this.txtCantidad.setEnabled(true);
                                this.txtNroBulto.setEnabled(true);
                                this.botonAgregar.setEnabled(true);
                                this.botonLimpiarAgregar.setEnabled(true);
                            } else {
                                encontrado = false;
                            }
                        }
                        break;

                    case 2:
                        String descripcion = this.txtBusqueda.getText();
                        for (InventarioTienda lista : listaProductos) {

                            if (lista.getProducto().getDescripcion().equalsIgnoreCase(descripcion)) {
                                // JOptionPane.showConfirmDialog(this, " LA DESCRIPCION ES CORRECTA");
                                inv = lista;
                                // this.jLayeredPaneDatosProductos.setEnabled(true);
                                this.txtCodigo.setText(lista.getProducto().getIdProducto().toString());
                                this.txtReferencia.setText(lista.getProducto().getReferenciaProducto());
                                this.txtDescripcion.setText(lista.getProducto().getDescripcion());
                                this.txtMarca.setText(lista.getProducto().getIdMarca().getNombre());
                                this.txtExistencia.setText(lista.getCantidad().toString());
                                this.txtCantidad.setEnabled(true);
                                this.txtNroBulto.setEnabled(true);
                                this.botonAgregar.setEnabled(true);
                                this.botonLimpiarAgregar.setEnabled(true);

                            } else {
                                encontrado = false;
                            }
                        }
                        break;
                    //            default:
                    //                throw new AssertionError();

                }

                if (encontrado == false) {
                    JOptionPane.showMessageDialog(null, "¡¡¡La Busqueda No Arrojo Ningun Resultado!!!\n"
                            + "Verifique los Datos de Buqueda y Vuelva a Intentarlo.");
                }
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "ERROR en la Busqueda : " + e);
            Logger.getLogger(Asignar1.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jXButtonBuscarActionPerformed

    private void comboBoxTipoBusquedaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxTipoBusquedaItemStateChanged

        this.txtBusqueda.setText("");
        this.txtBusqueda.requestFocus();
    }//GEN-LAST:event_comboBoxTipoBusquedaItemStateChanged

    private void botonListarProductosInventariTiendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListarProductosInventariTiendaActionPerformed
        try {
            if (resultListInventarioTienda.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No Hay Productos Disponibles Para Asignar");
                
                //Controles ComboBox
                comboBoxAlmacenDesde.setEnabled(true);
                comboBoxTiendaHasta.setEnabled(true);
                comboBoxUsuarios.setEnabled(true);

                //BOntones de Pedido
                jXButtonConfirmar.setEnabled(true);
                //OBjetos
                ususrioActual = null;
                almacenDesde = null;
                tiendaHasta = null;

                //Controles ComboBox
                comboBoxAlmacenDesde.setSelectedIndex(-1);
                comboBoxTiendaHasta.setSelectedIndex(-1);
                comboBoxUsuarios.setSelectedIndex(-1);

                //COntroles Panel Busqueda desabilitar
                comboBoxTipoBusqueda.setEnabled(false);
                txtBusqueda.setEnabled(false);
                jXButtonBuscar.setEnabled(false);
                botonListarProductosInventariTienda.setEnabled(false);

                //Limpiar Campos de Texto
                txtCodigo.setText("");
                txtCodigo.setEnabled(false);
                txtDescripcion.setText("");
                txtDescripcion.setEnabled(false);
                txtReferencia.setText("");
                txtReferencia.setEnabled(false);
                txtMarca.setText("");
                txtMarca.setEnabled(false);
                txtExistencia.setText("");
                txtExistencia.setEnabled(false);
                txtCantidad.setText("");
                txtCantidad.setEnabled(false);
                txtNroBulto.setText("");
                txtNroBulto.setEnabled(false);

                //Botones de Datos del Producto 
                botonAgregar.setEnabled(false);
                botonLimpiarAgregar.setEnabled(false);
                //foot Panel
                jXButtonAsignarMercancia.setEnabled(false);
                jXButtonImprimir_.setEnabled(false);
                jXButtonTotalizar.setEnabled(false);
                jXButtonUbicacbionProducto.setEnabled(false);
                jXTaskPaneCabeceraAsignacion.setCollapsed(false);
                jXButtonReiniciarFooter.setEnabled(false);
                jXButtonReiniciar.setEnabled(false);
               
            } else {

                JDInventarioTienda jdInventarioTienda
                        = new JDInventarioTienda(null, true,
                                this.resultListInventarioTienda, almacenDesde);
                jdInventarioTienda.setLocationRelativeTo(null);
                jdInventarioTienda.setVisible(true);
                if (jdInventarioTienda.inv == null) {
                    JOptionPane.showMessageDialog(this, "no ha Seleccionado Asignación");
                } else {
                    inv = jdInventarioTienda.inv;

                    // this.jLayeredPaneDatosProductos.setEnabled(true);
                    this.txtCodigo.setText(inv.getProducto().getIdProducto().toString());
                    this.txtCodigo.setEnabled(true);
                    this.txtReferencia.setText(inv.getProducto().getReferenciaProducto());
                    this.txtReferencia.setEnabled(true);
                    this.txtDescripcion.setText(inv.getProducto().getDescripcion());
                    this.txtDescripcion.setEnabled(true);
                    this.txtMarca.setText(inv.getProducto().getIdMarca().getNombre());
                    this.txtMarca.setEnabled(true);
                    this.txtExistencia.setText(inv.getCantidad().toString());
                    this.txtCantidad.setEnabled(true);
                    this.txtNroBulto.setEnabled(true);
                    this.botonAgregar.setEnabled(true);
                    this.botonLimpiarAgregar.setEnabled(true);
                    //this.txtNroBulto.setEnabled(false);
                    jXButtonTotalizar.setEnabled(true);
                    jXButtonReiniciarFooter.setEnabled(true);
                    this.txtCantidad.requestFocus();
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar Lista de Asignaciones" + ex);
            Logger.getLogger(Asignar1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_botonListarProductosInventariTiendaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaDetalleRegistrosAsignacionMercancia1;
    private org.jdesktop.swingx.JXButton botonAgregar;
    private org.jdesktop.swingx.JXButton botonLimpiarAgregar;
    private org.jdesktop.swingx.JXButton botonListarProductosInventariTienda;
    private org.jdesktop.swingx.JXBusyLabel busy;
    private org.jdesktop.swingx.JXBusyLabel busy1;
    private javax.swing.JComboBox comboBoxAlmacenDesde;
    private javax.swing.JComboBox comboBoxTiendaHasta;
    private javax.swing.JComboBox comboBoxTipoBusqueda;
    private javax.swing.JComboBox comboBoxUsuarios;
    private javax.swing.JLayeredPane jLayeredPaneBuscarProducto;
    private javax.swing.JLayeredPane jLayeredPaneDatosProductos;
    private javax.swing.JLayeredPane jLayeredPanePrincipal;
    private javax.swing.JLayeredPane jLayeredPaneProductos;
    private javax.swing.JLayeredPane jLayeredPaneTienda;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private org.jdesktop.swingx.JXButton jXButtonAsignarMercancia;
    private org.jdesktop.swingx.JXButton jXButtonBuscar;
    private org.jdesktop.swingx.JXButton jXButtonConfirmar;
    private org.jdesktop.swingx.JXButton jXButtonImprimir_;
    private org.jdesktop.swingx.JXButton jXButtonReiniciar;
    private org.jdesktop.swingx.JXButton jXButtonReiniciarFooter;
    private org.jdesktop.swingx.JXButton jXButtonTotalizar;
    private org.jdesktop.swingx.JXButton jXButtonUbicacbionProducto;
    private org.jdesktop.swingx.JXLabel jXLabel1;
    private org.jdesktop.swingx.JXLabel jXLabel10;
    private org.jdesktop.swingx.JXLabel jXLabel2;
    private org.jdesktop.swingx.JXLabel jXLabel3;
    private org.jdesktop.swingx.JXLabel jXLabel4;
    private org.jdesktop.swingx.JXLabel jXLabel5;
    private org.jdesktop.swingx.JXLabel jXLabel6;
    private org.jdesktop.swingx.JXLabel jXLabel7;
    private org.jdesktop.swingx.JXLabel jXLabel8;
    private org.jdesktop.swingx.JXLabel jXLabel9;
    private org.jdesktop.swingx.JXTaskPane jXTaskPaneCabeceraAsignacion;
    private org.jdesktop.swingx.JXLabel labelReferencia;
    private org.jdesktop.swingx.JXTextField txtBusqueda;
    private org.jdesktop.swingx.JXTextField txtCantidad;
    private org.jdesktop.swingx.JXTextField txtCodigo;
    private org.jdesktop.swingx.JXTextField txtDescripcion;
    private org.jdesktop.swingx.JXTextField txtExistencia;
    private org.jdesktop.swingx.JXTextField txtMarca;
    private org.jdesktop.swingx.JXTextField txtNroBulto;
    private org.jdesktop.swingx.JXTextField txtReferencia;
    // End of variables declaration//GEN-END:variables

    private void cargarComboBoxAlmacen() {

        String sql = "FROM Almacen a order by a.idAlmacen asc";
        resultListAlmacen = ObjectModelDAO.getResultQuery(sql);
        comboBoxTiendaHasta.removeAllItems();

        comboBoxAlmacenDesde.removeAllItems();

        // this.comboBoxAlmacenDesde.addItem("Selecionar");
        for (Object object : resultListAlmacen) {
            Almacen a = (Almacen) object;

            comboBoxTiendaHasta.addItem(a.getNombre() + " TLF:" + a.getTelefono1());
            comboBoxAlmacenDesde.addItem(a.getNombre() + " TLF:" + a.getTelefono1());
        }
        comboBoxAlmacenDesde.setEnabled(true);
        this.comboBoxAlmacenDesde.setSelectedIndex(-1);
        this.comboBoxTiendaHasta.setSelectedIndex(-1);
    }

}
